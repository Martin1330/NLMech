.TH "model::FDModel" 3 "Thu Apr 4 2019" "NLMech" \" -*- nroff -*-
.ad l
.nh
.SH NAME
model::FDModel \- A class for \fIfinite\fP \fIdifference\fP \fIapproximation\fP of \fBPeridynamics\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <fDModel\&.h>\fP
.PP
Inherits \fBmodel::Model\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFDModel\fP (\fBinp::Input\fP *deck)"
.br
.RI "\fIConstructor\&. \fP"
.in -1c
.PP
.RI "\fBCommon methods\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "size_t \fBcurrentStep\fP () override"
.br
.RI "\fIReturn the current time step\&. \fP"
.ti -1c
.RI "float \fBgetEnergy\fP () override"
.br
.RI "\fIReturn the total energy\&. \fP"
.in -1c
.in -1c
.SS "Private Member Functions"

.PP
.RI "\fBMethods to initialize the data\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBinitHObjects\fP ()"
.br
.RI "\fIInitialize high level data members\&. \fP"
.ti -1c
.RI "void \fBinit\fP ()"
.br
.RI "\fIInitialize remaining data members\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBMethods to implement explicit time integration\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBintegrate\fP ()"
.br
.RI "\fIPerform time integration\&. \fP"
.ti -1c
.RI "void \fBintegrateCD\fP ()"
.br
.RI "\fIPerform time integration using central-difference scheme\&. \fP"
.ti -1c
.RI "void \fBintegrateVerlet\fP ()"
.br
.RI "\fIPerform time integration using velocity-verlet scheme\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBMethods to apply boundary condition and initial condition\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBsetupBoundaryCondition\fP ()"
.br
.RI "\fIPerforms setup of boundary condition, such as filling node ids in loading object and setting of fixity of nodes\&. \fP"
.ti -1c
.RI "void \fBapplyDisplacementBC\fP ()"
.br
.RI "\fIApply displacement boundary condition to current position\&. \fP"
.ti -1c
.RI "void \fBapplyForceBC\fP ()"
.br
.RI "\fIApply external loading to the nodes\&. \fP"
.ti -1c
.RI "void \fBapplyInitialCondition\fP ()"
.br
.RI "\fIWrites the initial condition to the current position and current velocity\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBMethods to handle output and debug\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBoutput\fP ()"
.br
.RI "\fIOutput the snapshot of data at current time step\&. \fP"
.ti -1c
.RI "void \fBdebug\fP (float e_old)"
.br
.RI "\fIPerforms debug operations and outputs message to the screen\&. \fP"
.in -1c
.in -1c
.SS "Private Attributes"

.PP
.RI "\fBData: High level objects\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBfe::MassMatrix\fP * \fBd_massMatrix_p\fP"
.br
.RI "\fIPointer to Mass matrix object containing mass matrix (if any) \fP"
.ti -1c
.RI "\fBfe::Mesh\fP * \fBd_mesh_p\fP"
.br
.RI "\fIPointer to Mesh object\&. \fP"
.ti -1c
.RI "\fBgeometry::Fracture\fP * \fBd_fracture_p\fP"
.br
.RI "\fIPointer to Quadrature object\&. \fP"
.ti -1c
.RI "\fBgeometry::Neighbor\fP * \fBd_neighbor_p\fP"
.br
.RI "\fIPointer to Neighbor object\&. \fP"
.ti -1c
.RI "\fBgeometry::InteriorFlags\fP * \fBd_interiorFlags_p\fP"
.br
.RI "\fIPointer to InteriorFlags object\&. \fP"
.ti -1c
.RI "\fBinp::Input\fP * \fBd_input_p\fP"
.br
.RI "\fIPointer to Input object\&. \fP"
.ti -1c
.RI "\fBinp::Policy\fP * \fBd_policy_p\fP"
.br
.RI "\fIPointer to Policy object\&. \fP"
.ti -1c
.RI "\fBloading::InitialCondition\fP * \fBd_initialCondition_p\fP"
.br
.RI "\fIPointer to InitialCondition object\&. \fP"
.ti -1c
.RI "\fBloading::Loading\fP * \fBd_loading_p\fP"
.br
.RI "\fIPointer to Loading object\&. \fP"
.ti -1c
.RI "\fBmaterial::Material\fP * \fBd_material_p\fP"
.br
.RI "\fIPointer to Material object\&. \fP"
.in -1c
.in -1c
.SH "Detailed Description"
.PP 
A class for \fIfinite\fP \fIdifference\fP \fIapproximation\fP of \fBPeridynamics\fP\&. 

In this class we implement the \fIfinite\fP \fIdifference\fP \fIapproximation\fP of \fBperidynamics\fP\&.
.PP
We consider \fIexplicit\fP \fIscheme\fP such as \fIcentral\fP \fIdifference\fP and \fIvelocity\fP \fIverlet\fP for time integration\&.
.PP
This class acts as a link to lower rank classes, such as Mesh, Loading, InitialCondition, Fracture, etc, and uses the methods and data of the lower rank classes to run simulations\&.
.PP
\fBNote:\fP
.RS 4
1\&. We can run finite difference on any finite element mesh as long as mesh consists of only one type of elements\&. Therefore, we are restricted to run finite difference simulation only on uniform grids\&. User can prepare a mesh using \fBGmsh\fP and use its \&.msh file to run the finite difference approximation\&.
.PP
2\&. Currently only dimension 2 is supported\&.
.PP
3\&. Either triangle or quadrangle element mesh are supported\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "model::FDModel::FDModel (\fBinp::Input\fP * deck)\fC [explicit]\fP"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdeck\fP The input deck 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "size_t model::FDModel::currentStep ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Return the current time step\&. 
.PP
\fBReturns:\fP
.RS 4
Time step 
.RE
.PP

.PP
Reimplemented from \fBmodel::Model\fP\&.
.SS "void model::FDModel::debug (float e_old)\fC [private]\fP"

.PP
Performs debug operations and outputs message to the screen\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe_old\fP at previous time step 
.RE
.PP

.SS "float model::FDModel::getEnergy ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Return the total energy\&. 
.PP
\fBReturns:\fP
.RS 4
Total energy 
.RE
.PP

.PP
Reimplemented from \fBmodel::Model\fP\&.
.SH "Field Documentation"
.PP 
.SS "\fBgeometry::Fracture\fP* model::FDModel::d_fracture_p\fC [private]\fP"

.PP
Pointer to Quadrature object\&. 
.PP
\fBSee also:\fP
.RS 4
Quadrature
.RE
.PP
Pointer to Fracture object
.PP
\fBSee also:\fP
.RS 4
Fracture 
.RE
.PP

.PP
Referenced by initHObjects()\&.
.SS "\fBloading::InitialCondition\fP* model::FDModel::d_initialCondition_p\fC [private]\fP"

.PP
Pointer to InitialCondition object\&. 
.PP
\fBSee also:\fP
.RS 4
InitialCondition 
.RE
.PP

.PP
Referenced by initHObjects()\&.
.SS "\fBinp::Input\fP* model::FDModel::d_input_p\fC [private]\fP"

.PP
Pointer to Input object\&. 
.PP
\fBSee also:\fP
.RS 4
\fBInput\fP 
.RE
.PP

.PP
Referenced by initHObjects()\&.
.SS "\fBgeometry::InteriorFlags\fP* model::FDModel::d_interiorFlags_p\fC [private]\fP"

.PP
Pointer to InteriorFlags object\&. 
.PP
\fBSee also:\fP
.RS 4
InteriorFlags 
.RE
.PP

.PP
Referenced by initHObjects()\&.
.SS "\fBloading::Loading\fP* model::FDModel::d_loading_p\fC [private]\fP"

.PP
Pointer to Loading object\&. 
.PP
\fBSee also:\fP
.RS 4
Loading 
.RE
.PP

.PP
Referenced by initHObjects()\&.
.SS "\fBfe::MassMatrix\fP* model::FDModel::d_massMatrix_p\fC [private]\fP"

.PP
Pointer to Mass matrix object containing mass matrix (if any) 
.PP
\fBSee also:\fP
.RS 4
MassMatrix 
.RE
.PP

.PP
Referenced by initHObjects()\&.
.SS "\fBmaterial::Material\fP* model::FDModel::d_material_p\fC [private]\fP"

.PP
Pointer to Material object\&. 
.PP
\fBSee also:\fP
.RS 4
Material 
.RE
.PP

.PP
Referenced by init(), and initHObjects()\&.
.SS "\fBfe::Mesh\fP* model::FDModel::d_mesh_p\fC [private]\fP"

.PP
Pointer to Mesh object\&. 
.PP
\fBSee also:\fP
.RS 4
Mesh 
.RE
.PP

.PP
Referenced by init(), and initHObjects()\&.
.SS "\fBgeometry::Neighbor\fP* model::FDModel::d_neighbor_p\fC [private]\fP"

.PP
Pointer to Neighbor object\&. 
.PP
\fBSee also:\fP
.RS 4
Neighbor 
.RE
.PP

.PP
Referenced by initHObjects()\&.
.SS "\fBinp::Policy\fP* model::FDModel::d_policy_p\fC [private]\fP"

.PP
Pointer to Policy object\&. 
.PP
\fBSee also:\fP
.RS 4
Policy 
.RE
.PP

.PP
Referenced by init(), and initHObjects()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for NLMech from the source code\&.
