.TH "fe::Mesh" 3 "Thu Apr 4 2019" "NLMech" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fe::Mesh \- A class for mesh data\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <mesh\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMesh\fP (\fBinp::MeshDeck\fP *deck)"
.br
.RI "\fIConstructor\&. \fP"
.in -1c
.PP
.RI "\fBAccessor methods\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "size_t \fBgetDimension\fP ()"
.br
.RI "\fIGet the dimension of the domain\&. \fP"
.ti -1c
.RI "size_t \fBgetNumNodes\fP ()"
.br
.RI "\fIGet the number of nodes\&. \fP"
.ti -1c
.RI "size_t \fBgetNumDofs\fP ()"
.br
.RI "\fIGet the number of dofs\&. \fP"
.ti -1c
.RI "size_t \fBgetElementType\fP ()"
.br
.RI "\fIGet the type of element in mesh\&. \fP"
.ti -1c
.RI "\fButil::Point3\fP \fBgetNode\fP (size_t i)"
.br
.RI "\fIGet coordinates of node i\&. \fP"
.ti -1c
.RI "std::vector< \fButil::Point3\fP > \fBgetNodes\fP ()"
.br
.RI "\fIGet nodes data\&. \fP"
.ti -1c
.RI "const std::vector< \fButil::Point3\fP > * \fBgetNodesP\fP ()"
.br
.RI "\fIGet the pointer to nodes data\&. \fP"
.ti -1c
.RI "std::vector< size_t > \fBgetElementConnectivity\fP (size_t i)"
.br
.RI "\fIGet the connectivity of element\&. \fP"
.in -1c
.in -1c
.SS "Private Member Functions"

.PP
.RI "\fBUtility methods\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBcreateData\fP (std::string filename)"
.br
.RI "\fIReads mesh data from file and populates other data\&. \fP"
.ti -1c
.RI "void \fBcomputeVol\fP ()"
.br
.RI "\fICompute the nodal volume\&. \fP"
.in -1c
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBd_dim\fP"
.br
.RI "\fI\fBMesh\fP deck\&. \fP"
.ti -1c
.RI "std::string \fBd_spatialDiscretization\fP"
.br
.RI "\fITag for spatial discretization\&. \fP"
.ti -1c
.RI "std::string \fBd_filename\fP"
.br
.RI "\fIFilename to read mesh data\&. \fP"
.ti -1c
.RI "size_t \fBd_numDofs\fP"
.br
.RI "\fINumber of dofs = Dimension times number of nodes\&. \fP"
.ti -1c
.RI "std::vector< size_t > \fBd_gMap\fP"
.br
.RI "\fIMap from global reduced id to default global id\&. \fP"
.ti -1c
.RI "std::vector< int > \fBd_gInvMap\fP"
.br
.RI "\fIMap from Default global id to global reduced global id\&. \fP"
.ti -1c
.RI "std::pair< std::vector< double >, std::vector< double > > \fBd_bbox\fP"
.br
.RI "\fIBounding box\&. \fP"
.in -1c
.PP
.RI "\fBMesh data\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "size_t \fBd_numNodes\fP"
.br
.RI "\fINumber of nodes\&. \fP"
.ti -1c
.RI "size_t \fBd_numElems\fP"
.br
.RI "\fINumber of elements\&. \fP"
.ti -1c
.RI "size_t \fBd_eType\fP"
.br
.RI "\fIElement type\&. \fP"
.ti -1c
.RI "size_t \fBd_eNumVertex\fP"
.br
.RI "\fINumber of vertex per element\&. \fP"
.ti -1c
.RI "std::vector< \fButil::Point3\fP > \fBd_nodes\fP"
.br
.RI "\fIVector of initial (reference) coordinates of nodes\&. \fP"
.ti -1c
.RI "std::vector< size_t > \fBd_enc\fP"
.br
.RI "\fIElement-node connectivity data\&. \fP"
.ti -1c
.RI "std::vector< std::vector< size_t > > \fBd_nec\fP"
.br
.RI "\fINode-element connectivity data\&. \fP"
.ti -1c
.RI "std::vector< uint8_t > \fBd_fix\fP"
.br
.RI "\fIVector of fixity mask of each node\&. \fP"
.ti -1c
.RI "std::vector< double > \fBd_vol\fP"
.br
.RI "\fIVector of volume of each node\&. \fP"
.in -1c
.in -1c
.SH "Detailed Description"
.PP 
A class for mesh data\&. 

In this class the mesh data such as nodes, element-node connectivity, node-element connectivity are stored\&. The class also stores fixity mask of nodes which indicate if x-, y-, or z-dof of the node is fixed or free\&.
.PP
We currently only support mesh with only one type of elements, i\&.e\&. mesh can not have mix of two types of elements\&. For example, we can not have mesh with triangle and quadrangle elements together\&.
.PP
This class is used in both finite difference implementation and finite element implementation\&. For finite difference, we only require nodal volume\&. If the mesh file contains nodal volume, we skip reading element-node and node-element connectivity, however if mesh file does not have nodal volume data, we read connectivity data and compute nodal volume and then delete the connectivity data\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "fe::Mesh::Mesh (\fBinp::MeshDeck\fP * deck)\fC [explicit]\fP"

.PP
Constructor\&. The constructor initializes the data using input deck, performs checks on input data, and reads mesh file and populates the mesh related data\&. The mesh file of \&.csv, \&.vtu and \&.msh are supported\&.
.PP
\fBParameters:\fP
.RS 4
\fIdeck\fP Input deck which contains user-specified information
.RE
.PP
\fBSee also:\fP
.RS 4
readFile() 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void fe::Mesh::computeVol ()\fC [private]\fP"

.PP
Compute the nodal volume\&. This method uses finite element mesh and computes the nodal volume\&. 
.PP
Referenced by createData()\&.
.SS "void fe::Mesh::createData (std::string filename)\fC [private]\fP"

.PP
Reads mesh data from file and populates other data\&. This function calls reader methods in namespace rw to read the mesh file \&. For finite difference implementation, \&.csv mesh file with only nodal coordinates and nodal volumes data\&. However, for finite element implementation, we require either \&.vtu or \&.msh file with connectivity data\&.
.PP
\fBSee also:\fP
.RS 4
\fBrw::reader::readCsvFile()\fP, \fBrw::reader::readVtuFile()\fP, \fBrw::reader::readMshFile()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP Name of the mesh file 
.RE
.PP

.PP
Referenced by Mesh()\&.
.SS "size_t fe::Mesh::getDimension ()"

.PP
Get the dimension of the domain\&. 
.PP
\fBReturns:\fP
.RS 4
N dimension 
.RE
.PP

.PP
Referenced by model::FDModel::init()\&.
.SS "std::vector< size_t > fe::Mesh::getElementConnectivity (size_t i)"

.PP
Get the connectivity of element\&. Since we store connectivity in single vector, we use d_eNumVertex to get the connectivity of element\&. Given element e, the connectivity of e begins from location \[ e*d\_eNumVertex + 0 \] upto \[e*d\_eNumVertex + d\_eNumVertex - 1\]
.PP
So connectivity of e is
.PP
d_enc[e*d_eNumVertex+0], d_enc[e*d_eNumVertex+1], \&.\&.\&., d_end[e*d_eNumVertex+d_eNumVertex-1]
.PP
\fBParameters:\fP
.RS 4
\fIi\fP Id of an element 
.RE
.PP
\fBReturns:\fP
.RS 4
Vec vector of nodal ids 
.RE
.PP

.SS "size_t fe::Mesh::getElementType ()"

.PP
Get the type of element in mesh\&. 
.PP
\fBReturns:\fP
.RS 4
N element type (using VTK convention) 
.RE
.PP

.SS "\fButil::Point3\fP fe::Mesh::getNode (size_t i)"

.PP
Get coordinates of node i\&. 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP Id of the node 
.RE
.PP
\fBReturns:\fP
.RS 4
Coordinates 
.RE
.PP

.SS "std::vector< \fButil::Point3\fP > fe::Mesh::getNodes ()"

.PP
Get nodes data\&. 
.PP
\fBReturns:\fP
.RS 4
nodes vector of nodal coordinates 
.RE
.PP

.SS "const std::vector< \fButil::Point3\fP > * fe::Mesh::getNodesP ()"

.PP
Get the pointer to nodes data\&. 
.PP
\fBReturns:\fP
.RS 4
Pointer to nodes data 
.RE
.PP

.SS "size_t fe::Mesh::getNumDofs ()"

.PP
Get the number of dofs\&. 
.PP
\fBReturns:\fP
.RS 4
N number of dofs 
.RE
.PP

.PP
Referenced by model::FDModel::init()\&.
.SS "size_t fe::Mesh::getNumNodes ()"

.PP
Get the number of nodes\&. 
.PP
\fBReturns:\fP
.RS 4
N number of nodes 
.RE
.PP

.PP
Referenced by model::FDModel::init()\&.
.SH "Field Documentation"
.PP 
.SS "size_t fe::Mesh::d_dim\fC [private]\fP"

.PP
\fBMesh\fP deck\&. Dimension 
.PP
Referenced by createData(), getDimension(), and Mesh()\&.
.SS "std::vector<size_t> fe::Mesh::d_enc\fC [private]\fP"

.PP
Element-node connectivity data\&. First d_eNumVertex data gives the connectivity of first element, and next d_eNumVertex data gives the connectivity of second element and so on and so fourth\&. 
.PP
Referenced by createData(), and getElementConnectivity()\&.
.SS "size_t fe::Mesh::d_eNumVertex\fC [private]\fP"

.PP
Number of vertex per element\&. This information is useful in getting the connectivity for given element \&. We assume that mesh has only type of elements and based on that assumption we store the element-node connectivity in a single vector\&.
.PP
.IP "\(bu" 2
Line element: 2,
.IP "\(bu" 2
Triangle element: 3,
.IP "\(bu" 2
Quadrilateral element: 4,
.IP "\(bu" 2
Tetrahedral element: 4 
.PP

.PP
Referenced by createData(), and getElementConnectivity()\&.
.SS "size_t fe::Mesh::d_eType\fC [private]\fP"

.PP
Element type\&. We follow VTK convention to identify the elements:
.IP "\(bu" 2
Line element = 3,
.IP "\(bu" 2
Triangle element = 5,
.IP "\(bu" 2
Pixel element = 8,
.IP "\(bu" 2
Quadrilateral element = 9,
.IP "\(bu" 2
Tetrahedral element = 10 
.PP

.PP
Referenced by createData(), and getElementType()\&.
.SS "std::vector<uint8_t> fe::Mesh::d_fix\fC [private]\fP"

.PP
Vector of fixity mask of each node\&. First bit represents x-dof, second represents y-dof, and third represents z-dof\&. To check if x-dof of $ i^{th} $ node is fixed, we check d_fix[i] & FIX_X_MASK and if it is true then x-dof is fixed\&. Similarly we check for y-dof and z-dof using FIX_Y_MASK and FIX_Z_MASK\&.
.PP
We store data in uint8_t type which is 1 byte\&. Although we only need 3 bits\&. 
.PP
Referenced by createData()\&.
.SS "std::vector<int> fe::Mesh::d_gInvMap\fC [private]\fP"

.PP
Map from Default global id to global reduced global id\&. This is inverse of d_gMap 
.SS "std::vector<size_t> fe::Mesh::d_gMap\fC [private]\fP"

.PP
Map from global reduced id to default global id\&. Each free dof has associated global id, which we refer to as 'global
reduced id', and d_gMap provides a map from global reduced id to default global id\&.
.PP
\fBNote:\fP
.RS 4
Needed only when the discretization is 'weak_finite_element' for assembly of the mass matrix\&. 
.RE
.PP

.SS "std::vector<\fButil::Point3\fP> fe::Mesh::d_nodes\fC [private]\fP"

.PP
Vector of initial (reference) coordinates of nodes\&. We use struct Point3 which consists of three double data and comes with length() and dot() function\&. It also provides operators\&.
.PP
\fBSee also:\fP
.RS 4
\fButil::Point3\fP 
.RE
.PP

.PP
Referenced by createData(), getNode(), getNodes(), and getNodesP()\&.
.SS "std::string fe::Mesh::d_spatialDiscretization\fC [private]\fP"

.PP
Tag for spatial discretization\&. List of allowed values are:
.IP "\(bu" 2
finite_difference
.IP "\(bu" 2
weak_finite_element
.IP "\(bu" 2
nodal_finite_element
.IP "\(bu" 2
truss_finite_element 
.PP

.PP
Referenced by createData(), and Mesh()\&.
.SS "std::vector<double> fe::Mesh::d_vol\fC [private]\fP"

.PP
Vector of volume of each node\&. For uniform square mesh, the volume is simply $ h^2 $ in 2-d and $ h^3$ in 3-d, where $ h$ is the mesh size\&. For general mesh, the volume is computed using the finite element mesh\&. 
.PP
Referenced by createData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for NLMech from the source code\&.
