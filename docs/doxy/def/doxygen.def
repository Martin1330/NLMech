AutoGen Definitions dummy;
class = {
  cp-id     = 'classfe_1_1BaseElem';
  cp-name   = 'fe::BaseElem';
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'classfe_1_1QuadElem';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'classfe_1_1TriElem';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1a7d84f947e958ac5c3da3c2d953ea5087';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BaseElem';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'order';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'element_type';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '31';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param order Order of quadrature point approximation
@param element_type Type of element in the mesh
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1a6fac38265bc17262e5432dcab207af8c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getElemType';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '37';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get element type.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return type Type of element
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'baseElem_8h_1ab4cf10000522a072662379deb5067128';
        sec-mem-ref-line = '111';
        sec-mem-ref-name = 'd_elemType';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1a04fa2af5fdbfad17a407e3e7741fee94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getQuadOrder';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '43';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get order of quadrature approximation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return order Order of approximation
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'baseElem_8h_1ae78f990d8cbe68149cd2caa86890b4e1';
        sec-mem-ref-line = '105';
        sec-mem-ref-name = 'd_quadOrder';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1a96fb54d9aca45e987c163e95242ceb8f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNumQuadPoints';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '49';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get number of quadrature points in the data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return N Number of quadrature points
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'baseElem_8h_1a4aaff8a13bd51ece62f2134d4c24a981';
        sec-mem-ref-line = '108';
        sec-mem-ref-name = 'd_numQuadPts';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'baseElem_8cpp_1af2498f912dad68fa83c7a65bd2afce4d';
        sec-mem-ref-line = '14';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1acef766f6ccc02980d64f494b780bc5f1';
      sec-mem-virt = pure-virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
virtual std::vector< fe::QuadData >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getQuadPoints';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '62';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get vector of quadrature data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Given vertices of an element, where element type is same as what is
specified in the constructor of Quadrature class, it returns the vector
of quadrature data.

@param nodes Vector of vertices of an element
@return Vector of QuadData
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'baseElem_8h_1a96fb54d9aca45e987c163e95242ceb8f';
        sec-mem-ref-line = '49';
        sec-mem-ref-name = 'getNumQuadPoints';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1a8e56277e94c97dd990cf78a904470da6';
      sec-mem-virt = pure-virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
virtual std::vector< double >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getShapes';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '70';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the values of shape function at point p.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param p Location of point
@return Vector of shape functions at point p
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'baseElem_8h_1a96fb54d9aca45e987c163e95242ceb8f';
        sec-mem-ref-line = '49';
        sec-mem-ref-name = 'getNumQuadPoints';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1a2e2bd60d90c6669e10d89eb181f812a3';
      sec-mem-virt = pure-virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
virtual std::vector< std::vector< double > >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getDerShapes';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '79';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the values of derivative of shape function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param p Location of point
@return Vector of derivative of shape functions
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'baseElem_8h_1a96fb54d9aca45e987c163e95242ceb8f';
        sec-mem-ref-line = '49';
        sec-mem-ref-name = 'getNumQuadPoints';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1ae486960ff68082378fb2540e42a296e3';
      sec-mem-virt = pure-virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
virtual double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mapRefElemToElem';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< double > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'shapes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< std::vector< double >> &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'der_shapes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '92';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Maps the point on reference element to given element and
returns the determinant of Jacobian.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param p Given point in reference element which is to be mapped
@param shapes Vector shape functions evaluated at the point p
@param der_shapes Vector of derivative of shape functions at point p
@param nodes Coordinates of vertices of a given element
@return det(J) Determinant of the Jacobian
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'baseElem_8h_1a96fb54d9aca45e987c163e95242ceb8f';
        sec-mem-ref-line = '49';
        sec-mem-ref-name = 'getNumQuadPoints';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1BaseElem_1af2498f912dad68fa83c7a65bd2afce4d';
      sec-mem-virt = pure-virtual;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
virtual void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'init';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '102';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Compute the quadrature points.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This must be implemented by inheriting classes.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'baseElem_8h_1a96fb54d9aca45e987c163e95242ceb8f';
        sec-mem-ref-line = '49';
        sec-mem-ref-name = 'getNumQuadPoints';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1BaseElem_1ae78f990d8cbe68149cd2caa86890b4e1';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_quadOrder';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '105';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Order of quadrature point integration approximation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'baseElem_8h_1a04fa2af5fdbfad17a407e3e7741fee94';
        sec-mem-ref-line = '43';
        sec-mem-ref-name = 'getQuadOrder';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'fe::QuadElem::init';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'fe::TriElem::init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1BaseElem_1a4aaff8a13bd51ece62f2134d4c24a981';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_numQuadPts';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '108';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Number of quadrature points for order d_quadOrder.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'baseElem_8h_1a96fb54d9aca45e987c163e95242ceb8f';
        sec-mem-ref-line = '49';
        sec-mem-ref-name = 'getNumQuadPoints';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1BaseElem_1ab4cf10000522a072662379deb5067128';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_elemType';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '111';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Element type.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'baseElem_8h_1a6fac38265bc17262e5432dcab207af8c';
        sec-mem-ref-line = '37';
        sec-mem-ref-name = 'getElemType';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1BaseElem_1a7dd13e1c51541c54a229244a56b0a64b';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< fe::QuadData >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_quads';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
      sec-mem-desc-line = '114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Quadrature data collection.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a17d1ad9d7bceb040588300ed7f854d4e';
        sec-mem-ref-line = '17';
        sec-mem-ref-name = 'fe::QuadElem::getQuadPoints';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'fe::QuadElem::init';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ad9ee36384ad54b3cab72215fc5fbd096';
        sec-mem-ref-line = '17';
        sec-mem-ref-name = 'fe::TriElem::getQuadPoints';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'fe::TriElem::init';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
  cp-fileline  = '22';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A base class to compute and store quadrature data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
This class provides methods such as quadrature points for integration,
shape functions at quadrature points, and derivative of shape functions.

@sa TriElem, QuadElem
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 137;
        node-label = 'fe::TriElem';
        node-link = {
          node-link-id = 'classfe_1_1TriElem';
        };
        node-child = {
          child-id = '135';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 135;
        node-label = 'fe::BaseElem';
        node-link = {
          node-link-id = 'classfe_1_1BaseElem';
        };
      }; /* node */
      node = {
        node-id    = 136;
        node-label = 'fe::QuadElem';
        node-link = {
          node-link-id = 'classfe_1_1QuadElem';
        };
        node-child = {
          child-id = '135';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 138;
        node-label = 'fe::BaseElem';
        node-link = {
          node-link-id = 'classfe_1_1BaseElem';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1BCData';
  cp-name   = 'inp::BCData';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1BCData_1a0cdfcd5d88e959f8b7997f49a4f1590f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BCData';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/loadingDeck.h';
      sec-mem-desc-line = '91';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/loadingDeck.h';
  cp-fileline  = '15';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure for displacement/force boundary condition data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 140;
        node-label = 'inp::BCData';
        node-link = {
          node-link-id = 'structinp_1_1BCData';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structinp_1_1EdgeCrack';
  cp-name   = 'inp::EdgeCrack';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1EdgeCrack_1ac215b9ea9c487dc16eecc526ae59df2d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'EdgeCrack';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/fractureDeck.h';
      sec-mem-desc-line = '84';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/fractureDeck.h';
  cp-fileline  = '15';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A structure to edge crack of any orientation.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 142;
        node-label = 'inp::EdgeCrack';
        node-link = {
          node-link-id = 'structinp_1_1EdgeCrack';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classmodel_1_1FDModel';
  cp-name   = 'model::FDModel';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'classmodel_1_1Model';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classmodel_1_1FDModel_1ad86e7ed7dc45fe211211ad07641d3cd2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FDModel';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::Input *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/model/fd/fDModel.h';
      sec-mem-desc-line = '81';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck The input deck
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'fDModel_8cpp_1a7f08b1b3c21b34df876f0f04e882f040';
        sec-mem-ref-line = '49';
        sec-mem-ref-name = 'initHObjects';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'fDModel_8cpp_1aac7c6d22f86e553791557c0899b45bdd';
        sec-mem-ref-line = '71';
        sec-mem-ref-name = 'init';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'fDModel_8cpp_1a7499b8c2f8cd88d3933c6f6091929c2a';
        sec-mem-ref-line = '122';
        sec-mem-ref-name = 'setupBoundaryCondition';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/model/fd/fDModel.h';
  cp-fileline  = '74';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class for \a finite \a difference \a approximation of
\b Peridynamics.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
In this class we implement the \a finite \a difference \a approximation of
\b peridynamics.

We consider \a explicit \a scheme such as \a central \a difference and
\a velocity \a verlet for time integration.

This class acts as a link to lower rank classes, such as Mesh, Loading,
InitialCondition, Fracture, etc, and uses the methods and data of the
lower rank classes to run simulations.

@note 1. We can run finite difference on any finite element mesh as long as
mesh consists of only one type of elements. Therefore, we are restricted
to run finite difference simulation only on uniform grids. User can
prepare a mesh using \b Gmsh and use its .msh file to run the finite
difference approximation.

@note 2. Currently only dimension 2 is supported.

@note 3. Either triangle or quadrangle element mesh are supported.
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 144;
        node-label = 'model::Model';
        node-link = {
          node-link-id = 'classmodel_1_1Model';
        };
      }; /* node */
      node = {
        node-id    = 143;
        node-label = 'model::FDModel';
        node-link = {
          node-link-id = 'classmodel_1_1FDModel';
        };
        node-child = {
          child-id = '144';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 146;
        node-label = 'model::Model';
        node-link = {
          node-link-id = 'classmodel_1_1Model';
        };
      }; /* node */
      node = {
        node-id    = 160;
        node-label = 'inp::MaterialDeck';
        node-link = {
          node-link-id = 'structinp_1_1MaterialDeck';
        };
        node-child = {
          child-id = '161';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+d_matData
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 150;
        node-label = 'loading::Loading';
        node-link = {
          node-link-id = 'classloading_1_1Loading';
        };
      }; /* node */
      node = {
        node-id    = 151;
        node-label = 'loading::InitialCondition';
        node-link = {
          node-link-id = 'classloading_1_1InitialCondition';
        };
      }; /* node */
      node = {
        node-id    = 159;
        node-label = 'inp::Input';
        node-link = {
          node-link-id = 'classinp_1_1Input';
        };
        node-child = {
          child-id = '160';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_materialDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '162';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_neighborDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '157';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_massMatrixDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '155';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_fractureDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '153';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_policyDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '163';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_solverDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '164';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_quadratureDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '165';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_outputDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '166';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_modelDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '167';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_geometryDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '168';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_loadingDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '149';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_interiorFlagsDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '169';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_initialConditionDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 163;
        node-label = 'inp::SolverDeck';
        node-link = {
          node-link-id = 'structinp_1_1SolverDeck';
        };
      }; /* node */
      node = {
        node-id    = 156;
        node-label = 'fe::MassMatrix';
        node-link = {
          node-link-id = 'classfe_1_1MassMatrix';
        };
        node-child = {
          child-id = '157';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_massMatrixDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 148;
        node-label = 'geometry::InteriorFlags';
        node-link = {
          node-link-id = 'classgeometry_1_1InteriorFlags';
        };
        node-child = {
          child-id = '149';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_interiorFlagsDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 152;
        node-label = 'inp::Policy';
        node-link = {
          node-link-id = 'classinp_1_1Policy';
        };
        node-child = {
          child-id = '153';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_policyDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '152';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_instance_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 153;
        node-label = 'inp::PolicyDeck';
        node-link = {
          node-link-id = 'structinp_1_1PolicyDeck';
        };
      }; /* node */
      node = {
        node-id    = 161;
        node-label = 'inp::MatData';
        node-link = {
          node-link-id = 'structinp_1_1MatData';
        };
      }; /* node */
      node = {
        node-id    = 164;
        node-label = 'inp::QuadratureDeck';
        node-link = {
          node-link-id = 'structinp_1_1QuadratureDeck';
        };
      }; /* node */
      node = {
        node-id    = 145;
        node-label = 'model::FDModel';
        node-link = {
          node-link-id = 'classmodel_1_1FDModel';
        };
        node-child = {
          child-id = '146';
          relation = public-inheritance;
        }; /* node-child */
        node-child = {
          child-id = '147';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_mesh_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '148';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_interiorFlags_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '150';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_loading_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '151';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_initialCondition_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '152';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_policy_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '154';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_fracture_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '156';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_massMatrix_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '158';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_material_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '159';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_input_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '171';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_neighbor_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 167;
        node-label = 'inp::MeshDeck';
        node-link = {
          node-link-id = 'structinp_1_1MeshDeck';
        };
      }; /* node */
      node = {
        node-id    = 154;
        node-label = 'geometry::Fracture';
        node-link = {
          node-link-id = 'classgeometry_1_1Fracture';
        };
        node-child = {
          child-id = '155';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_fractureDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 162;
        node-label = 'inp::NeighborDeck';
        node-link = {
          node-link-id = 'structinp_1_1NeighborDeck';
        };
      }; /* node */
      node = {
        node-id    = 147;
        node-label = 'fe::Mesh';
        node-link = {
          node-link-id = 'classfe_1_1Mesh';
        };
      }; /* node */
      node = {
        node-id    = 171;
        node-label = 'geometry::Neighbor';
        node-link = {
          node-link-id = 'classgeometry_1_1Neighbor';
        };
        node-child = {
          child-id = '162';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_neighborDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 170;
        node-label = 'inp::ICData';
        node-link = {
          node-link-id = 'structinp_1_1ICData';
        };
      }; /* node */
      node = {
        node-id    = 169;
        node-label = 'inp::InitialConditionDeck';
        node-link = {
          node-link-id = 'structinp_1_1InitialConditionDeck';
        };
        node-child = {
          child-id = '170';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+d_uICData
+d_vICData
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 165;
        node-label = 'inp::OutputDeck';
        node-link = {
          node-link-id = 'structinp_1_1OutputDeck';
        };
      }; /* node */
      node = {
        node-id    = 168;
        node-label = 'inp::LoadingDeck';
        node-link = {
          node-link-id = 'structinp_1_1LoadingDeck';
        };
      }; /* node */
      node = {
        node-id    = 158;
        node-label = 'material::Material';
        node-link = {
          node-link-id = 'classmaterial_1_1Material';
        };
      }; /* node */
      node = {
        node-id    = 155;
        node-label = 'inp::FractureDeck';
        node-link = {
          node-link-id = 'structinp_1_1FractureDeck';
        };
      }; /* node */
      node = {
        node-id    = 149;
        node-label = 'inp::InteriorFlagsDeck';
        node-link = {
          node-link-id = 'structinp_1_1InteriorFlagsDeck';
        };
      }; /* node */
      node = {
        node-id    = 157;
        node-label = 'inp::MassMatrixDeck';
        node-link = {
          node-link-id = 'structinp_1_1MassMatrixDeck';
        };
      }; /* node */
      node = {
        node-id    = 166;
        node-label = 'inp::ModelDeck';
        node-link = {
          node-link-id = 'structinp_1_1ModelDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
class = {
  cp-id     = 'classgeometry_1_1Fracture';
  cp-name   = 'geometry::Fracture';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classgeometry_1_1Fracture_1a7dedaa6abbbe63bbeb1b6c5ae862febb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Fracture';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::FractureDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/fracture.h';
      sec-mem-desc-line = '39';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck Input deck which contains user-specified information
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classgeometry_1_1Fracture_1ad9b85f26d31c07e7f3549a64eeb2409b';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
inp::FractureDeck *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_fractureDeck_p';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/fracture.h';
      sec-mem-desc-line = '43';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Interior flags deck.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classgeometry_1_1Fracture_1a0e5e47041fa17f98e7969731b35adab0';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< char > >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_fracture';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/fracture.h';
      sec-mem-desc-line = '65';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Vector which stores the state of bonds.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Given node i, vector d_fracture[i] is the list of state of bonds of node
i.

@note 1. Since we only need single bit, as fracture state is either 0 (not
broken) or 1 (broken), we can further optimize the memory. Currently, we
store 4 bit per bond. In future we can try to reduce it to just 2 or 1
bit per bond.

@note 2. According to <a
href="https://codereview.stackexchange
.com/questions/117880/comparing-stdvectorbool-to-stdvectorchar
">Comparing vector<bool> and vector<char></a>
the vector<char> is faster for small size of vector. Since list of bonds
for each node is smaller number, we use vector<char>.

@note 3. Both speed optimization and memory optimization is required to
store the fracture state efficiently.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/fracture.h';
  cp-fileline  = '32';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class for fracture state of bonds.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
In this class fracture state of each bonds (i.e. whether the bond is
broken or not) is stored. It also comes with the access to the state
of bond.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 173;
        node-label = 'geometry::Fracture';
        node-link = {
          node-link-id = 'classgeometry_1_1Fracture';
        };
        node-child = {
          child-id = '174';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_fractureDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 174;
        node-label = 'inp::FractureDeck';
        node-link = {
          node-link-id = 'structinp_1_1FractureDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1FractureDeck';
  cp-name   = 'inp::FractureDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1FractureDeck_1ab909dd11a1a540e1c327d7d114477591';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FractureDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/fractureDeck.h';
      sec-mem-desc-line = '124';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/fractureDeck.h';
  cp-fileline  = '98';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store fracture related input data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 176;
        node-label = 'inp::FractureDeck';
        node-link = {
          node-link-id = 'structinp_1_1FractureDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structinp_1_1ICData';
  cp-name   = 'inp::ICData';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1ICData_1a06763346ed1587c0f82dfba6bafed953';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ICData';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/initialConditionDeck.h';
      sec-mem-desc-line = '43';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/initialConditionDeck.h';
  cp-fileline  = '15';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure for initial condition data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 178;
        node-label = 'inp::ICData';
        node-link = {
          node-link-id = 'structinp_1_1ICData';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classloading_1_1InitialCondition';
  cp-name   = 'loading::InitialCondition';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classloading_1_1InitialCondition_1a279774a25fcd6089c9e520828f9aab52';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'InitialCondition';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::InitialConditionDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/loading/initialCondition.h';
      sec-mem-desc-line = '32';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck Input deck which contains user-specified information
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/loading/initialCondition.h';
  cp-fileline  = '25';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to apply initial condition.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
This class processes input data and provides method to apply initial
condition.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 180;
        node-label = 'loading::InitialCondition';
        node-link = {
          node-link-id = 'classloading_1_1InitialCondition';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1InitialConditionDeck';
  cp-name   = 'inp::InitialConditionDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1InitialConditionDeck_1a2b032369429f875d3bcea6959b363fbb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'InitialConditionDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/initialConditionDeck.h';
      sec-mem-desc-line = '70';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/initialConditionDeck.h';
  cp-fileline  = '52';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store policy data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 183;
        node-label = 'inp::ICData';
        node-link = {
          node-link-id = 'structinp_1_1ICData';
        };
      }; /* node */
      node = {
        node-id    = 182;
        node-label = 'inp::InitialConditionDeck';
        node-link = {
          node-link-id = 'structinp_1_1InitialConditionDeck';
        };
        node-child = {
          child-id = '183';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+d_uICData
+d_vICData
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classinp_1_1Input';
  cp-name   = 'inp::Input';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classinp_1_1Input_1a1ab2b8acc12782bd57ae1a107eafa32d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Input';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::string &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'filename';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/input.h';
      sec-mem-desc-line = '62';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param filename of input file
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8h_1a56e96c25dcf3705deabc7db69a21335f';
        sec-mem-ref-line = '245';
        sec-mem-ref-name = 'd_inputFilename';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1a3a417813c17cc7caf490f47252120668';
        sec-mem-ref-line = '98';
        sec-mem-ref-name = 'setModelDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1afda699a62cdd55f349c294b99d30e619';
        sec-mem-ref-line = '162';
        sec-mem-ref-name = 'setMeshDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1af99977ca5bc2b842f045795550d318a1';
        sec-mem-ref-line = '185';
        sec-mem-ref-name = 'setMassMatrixDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1a8ce876989bd195e3d9b588665b0487f1';
        sec-mem-ref-line = '195';
        sec-mem-ref-name = 'setQuadratureDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1af473f3755295146ef790208e63c5aa81';
        sec-mem-ref-line = '207';
        sec-mem-ref-name = 'setNeighborDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1aef9f06052300972f117090da5c6e5c03';
        sec-mem-ref-line = '220';
        sec-mem-ref-name = 'setFractureDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1a31876d383eba1aaf2568b8c462a88a4a';
        sec-mem-ref-line = '276';
        sec-mem-ref-name = 'setInteriorFlagsDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1aa02d6cfd8253d9488c98950202366d69';
        sec-mem-ref-line = '288';
        sec-mem-ref-name = 'setInitialConditionDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1ab6f5bef48a00aae687a556c70f9b46cf';
        sec-mem-ref-line = '323';
        sec-mem-ref-name = 'setLoadingDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1a455bb5b1b752e07867ddb582ac398451';
        sec-mem-ref-line = '422';
        sec-mem-ref-name = 'setMaterialDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1a28eda38c0c63b27f3be7a5b49b5339b6';
        sec-mem-ref-line = '492';
        sec-mem-ref-name = 'setOutputDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1a4ddf4da85b2a2dc79d4c9fd2f16d9cd3';
        sec-mem-ref-line = '513';
        sec-mem-ref-name = 'setPolicyDeck';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'input_8cpp_1a44d52093c8f44e4d099f1b64e93dd915';
        sec-mem-ref-line = '522';
        sec-mem-ref-name = 'setSolverDeck';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/input.h';
  cp-fileline  = '55';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to read input file.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
In this class we create struct data types, and read input file and store
in the respective structs. The class depends on the YAML library.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 186;
        node-label = 'inp::MaterialDeck';
        node-link = {
          node-link-id = 'structinp_1_1MaterialDeck';
        };
        node-child = {
          child-id = '187';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+d_matData
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 185;
        node-label = 'inp::Input';
        node-link = {
          node-link-id = 'classinp_1_1Input';
        };
        node-child = {
          child-id = '186';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_materialDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '188';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_neighborDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '189';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_massMatrixDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '190';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_fractureDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '191';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_policyDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '192';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_solverDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '193';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_quadratureDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '194';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_outputDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '195';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_modelDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '196';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_geometryDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '197';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_loadingDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '198';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_interiorFlagsDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '199';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_initialConditionDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 192;
        node-label = 'inp::SolverDeck';
        node-link = {
          node-link-id = 'structinp_1_1SolverDeck';
        };
      }; /* node */
      node = {
        node-id    = 191;
        node-label = 'inp::PolicyDeck';
        node-link = {
          node-link-id = 'structinp_1_1PolicyDeck';
        };
      }; /* node */
      node = {
        node-id    = 187;
        node-label = 'inp::MatData';
        node-link = {
          node-link-id = 'structinp_1_1MatData';
        };
      }; /* node */
      node = {
        node-id    = 193;
        node-label = 'inp::QuadratureDeck';
        node-link = {
          node-link-id = 'structinp_1_1QuadratureDeck';
        };
      }; /* node */
      node = {
        node-id    = 196;
        node-label = 'inp::MeshDeck';
        node-link = {
          node-link-id = 'structinp_1_1MeshDeck';
        };
      }; /* node */
      node = {
        node-id    = 188;
        node-label = 'inp::NeighborDeck';
        node-link = {
          node-link-id = 'structinp_1_1NeighborDeck';
        };
      }; /* node */
      node = {
        node-id    = 200;
        node-label = 'inp::ICData';
        node-link = {
          node-link-id = 'structinp_1_1ICData';
        };
      }; /* node */
      node = {
        node-id    = 199;
        node-label = 'inp::InitialConditionDeck';
        node-link = {
          node-link-id = 'structinp_1_1InitialConditionDeck';
        };
        node-child = {
          child-id = '200';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+d_uICData
+d_vICData
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 194;
        node-label = 'inp::OutputDeck';
        node-link = {
          node-link-id = 'structinp_1_1OutputDeck';
        };
      }; /* node */
      node = {
        node-id    = 197;
        node-label = 'inp::LoadingDeck';
        node-link = {
          node-link-id = 'structinp_1_1LoadingDeck';
        };
      }; /* node */
      node = {
        node-id    = 190;
        node-label = 'inp::FractureDeck';
        node-link = {
          node-link-id = 'structinp_1_1FractureDeck';
        };
      }; /* node */
      node = {
        node-id    = 198;
        node-label = 'inp::InteriorFlagsDeck';
        node-link = {
          node-link-id = 'structinp_1_1InteriorFlagsDeck';
        };
      }; /* node */
      node = {
        node-id    = 189;
        node-label = 'inp::MassMatrixDeck';
        node-link = {
          node-link-id = 'structinp_1_1MassMatrixDeck';
        };
      }; /* node */
      node = {
        node-id    = 195;
        node-label = 'inp::ModelDeck';
        node-link = {
          node-link-id = 'structinp_1_1ModelDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
class = {
  cp-id     = 'classgeometry_1_1InteriorFlags';
  cp-name   = 'geometry::InteriorFlags';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classgeometry_1_1InteriorFlags_1a336c187642b51294deaf7dc3f596660e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'InteriorFlags';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::InteriorFlagsDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/interiorFlags.h';
      sec-mem-desc-line = '31';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck Input deck which contains user-specified information
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classgeometry_1_1InteriorFlags_1a501158f9c754b0fa7e9be11d9ca8545d';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
inp::InteriorFlagsDeck *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_interiorFlagsDeck_p';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/interiorFlags.h';
      sec-mem-desc-line = '35';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Interior flags deck.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classgeometry_1_1InteriorFlags_1acc5f5b6814011359aa1624cef66fbcde';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< char >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_intFlags';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/interiorFlags.h';
      sec-mem-desc-line = '51';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Vector of flags.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Since char data provides 4 bits, we club flags of 4 nodes as one store the
flags in char data.

Given node \a i, to find the interior flag, we proceed as follows:

- Location in vector d_intFlags: \a j = \a i/4
- Bit location: \a b = \a i%4

Now we check bit at location \a b of d_intFlags[ \a j ]. If that bit is
\a 0, then the node \a i is in the interior, otherwise it is in the
exterior.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/interiorFlags.h';
  cp-fileline  = '24';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to store interior/exterior flags of node.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
In this class we store the the flag which indicates if the node is inside
the material domain or it is near the boundary. This is useful when we
implement \a no-fail \a region in \b Peridynamics.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 202;
        node-label = 'geometry::InteriorFlags';
        node-link = {
          node-link-id = 'classgeometry_1_1InteriorFlags';
        };
        node-child = {
          child-id = '203';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_interiorFlagsDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 203;
        node-label = 'inp::InteriorFlagsDeck';
        node-link = {
          node-link-id = 'structinp_1_1InteriorFlagsDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1InteriorFlagsDeck';
  cp-name   = 'inp::InteriorFlagsDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1InteriorFlagsDeck_1a48c3f730a08563ff1b968c86123c20fb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'InteriorFlagsDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/interiorFlagsDeck.h';
      sec-mem-desc-line = '35';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/interiorFlagsDeck.h';
  cp-fileline  = '17';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store interior flags (no-fail region)
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 205;
        node-label = 'inp::InteriorFlagsDeck';
        node-link = {
          node-link-id = 'structinp_1_1InteriorFlagsDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classloading_1_1Loading';
  cp-name   = 'loading::Loading';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classloading_1_1Loading_1a24be2c5f1b3c7053ea36643132c05464';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Loading';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::LoadingDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/loading/loading.h';
      sec-mem-desc-line = '45';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck Input deck which contains user-specified information
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/loading/loading.h';
  cp-fileline  = '38';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to apply displacement and force boundary condition.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
In this class we process input data and apply complex boundary condition.
The boundary conditions can be specified in multiple sets, and in each set
one can specify the region where the boundary condition is to be applied,
and the type of function to be used.

This class also provides method to set the fixity of nodes as fixed if the
displacement is specified on the dof of the node.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 207;
        node-label = 'loading::Loading';
        node-link = {
          node-link-id = 'classloading_1_1Loading';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1LoadingDeck';
  cp-name   = 'inp::LoadingDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1LoadingDeck_1a7ca6679011ea3079f80ec699426b7c1b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'LoadingDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/loadingDeck.h';
      sec-mem-desc-line = '118';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/loadingDeck.h';
  cp-fileline  = '100';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store policy data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 209;
        node-label = 'inp::LoadingDeck';
        node-link = {
          node-link-id = 'structinp_1_1LoadingDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classfe_1_1MassMatrix';
  cp-name   = 'fe::MassMatrix';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1MassMatrix_1a788c599affdbb43485def68f09d55e4c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MassMatrix';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::MassMatrixDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/massMatrix.h';
      sec-mem-desc-line = '41';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck Input deck which contains user-specified information
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'massMatrix_8h_1a9d2750052f338518d789500e1afbe6ae';
        sec-mem-ref-line = '51';
        sec-mem-ref-name = 'd_massMatrixDeck_p';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'massMatrixDeck_8h_1a4ccce636e1568f7732076e1aa1cc92ad';
        sec-mem-ref-line = '33';
        sec-mem-ref-name = 'inp::MassMatrixDeck::d_MApproxType';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'policy_8cpp_1a76c7b62d2e91d2001e29f3fdbd1be3fe';
        sec-mem-ref-line = '23';
        sec-mem-ref-name = 'inp::Policy::getInstance';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1MassMatrix_1a9d2750052f338518d789500e1afbe6ae';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
inp::MassMatrixDeck *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_massMatrixDeck_p';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/massMatrix.h';
      sec-mem-desc-line = '51';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mass matrix deck.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Deck contains information such as order of quadrature approximation and
type of approximation to be used for mass matrix.

@sa inp::MassMatrixDeck
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'massMatrix_8cpp_1a788c599affdbb43485def68f09d55e4c';
        sec-mem-ref-line = '11';
        sec-mem-ref-name = 'MassMatrix';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/massMatrix.h';
  cp-fileline  = '34';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class for mass matrix.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
In this class we compute and store inverse of a mass matrix. We can either
compute exact mass matrix and its inverse (using Blaze library) or we can
use row-sum approximation (lumping) to approximate the matrix as diagonal
matrix.

User can specify the order of quadrature approximation in computation of
elements of mass matrix.

@note This class is needed only when the discretization is of
weak_finite_element type. It depends on the Mesh::d_gMap and Mesh::d_gInvMap
of Mesh class.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 211;
        node-label = 'fe::MassMatrix';
        node-link = {
          node-link-id = 'classfe_1_1MassMatrix';
        };
        node-child = {
          child-id = '212';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_massMatrixDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 212;
        node-label = 'inp::MassMatrixDeck';
        node-link = {
          node-link-id = 'structinp_1_1MassMatrixDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1MassMatrixDeck';
  cp-name   = 'inp::MassMatrixDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1MassMatrixDeck_1a1d389db01bfc8c0fcf1c99bb49baa490';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MassMatrixDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/massMatrixDeck.h';
      sec-mem-desc-line = '40';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/massMatrixDeck.h';
  cp-fileline  = '19';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store mass matrix related input data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 214;
        node-label = 'inp::MassMatrixDeck';
        node-link = {
          node-link-id = 'structinp_1_1MassMatrixDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structinp_1_1MatData';
  cp-name   = 'inp::MatData';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1MatData_1abf3ffc7eca0ad7db449cc87e4ffbec0e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MatData';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/materialDeck.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/materialDeck.h';
  cp-fileline  = '16';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure for elastic properties and fracture properties.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 216;
        node-label = 'inp::MatData';
        node-link = {
          node-link-id = 'structinp_1_1MatData';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classmaterial_1_1Material';
  cp-name   = 'material::Material';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classmaterial_1_1Material_1afe5331d9661910829ddc289e81b740ef';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Material';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::MaterialDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/material/material.h';
      sec-mem-desc-line = '36';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck Input deck which contains user-specified information
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classmaterial_1_1Material_1a2ab38ef68dd93f4aaf4b8bc711b0f81f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isStateActive';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/material/material.h';
      sec-mem-desc-line = '42';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if state-based potential is active.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return True/false
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'fDModel_8cpp_1aac7c6d22f86e553791557c0899b45bdd';
        sec-mem-ref-line = '71';
        sec-mem-ref-name = 'model::FDModel::init';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/material/material.h';
  cp-fileline  = '29';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to model a peridynamic material.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 218;
        node-label = 'material::Material';
        node-link = {
          node-link-id = 'classmaterial_1_1Material';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1MaterialDeck';
  cp-name   = 'inp::MaterialDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1MaterialDeck_1a63f2479307dde404afcbcf934f56b768';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MaterialDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/materialDeck.h';
      sec-mem-desc-line = '199';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/materialDeck.h';
  cp-fileline  = '139';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store material related data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 220;
        node-label = 'inp::MaterialDeck';
        node-link = {
          node-link-id = 'structinp_1_1MaterialDeck';
        };
        node-child = {
          child-id = '221';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+d_matData
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 221;
        node-label = 'inp::MatData';
        node-link = {
          node-link-id = 'structinp_1_1MatData';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structutil_1_1Matrix3';
  cp-name   = 'util::Matrix3';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structutil_1_1Matrix3_1a0ed74445ede833f02dd62475b6707fc9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Matrix3';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrix.h';
      sec-mem-desc-line = '51';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrix.h';
  cp-fileline  = '12';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A structure to represent 3d matrices.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 223;
        node-label = 'util::Matrix3';
        node-link = {
          node-link-id = 'structutil_1_1Matrix3';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classfe_1_1Mesh';
  cp-name   = 'fe::Mesh';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Mesh_1a0041afbb7d7e94bfb01c108e460196fb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Mesh';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::MeshDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The constructor initializes the data using input deck, performs checks
on input data, and reads mesh file and populates the mesh related data.
The mesh file of .csv, .vtu and .msh are supported.

@param deck Input deck which contains user-specified information

@sa readFile()
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'mesh_8h_1a34ffe327272d99ace79c46cb97f11cae';
        sec-mem-ref-line = '240';
        sec-mem-ref-name = 'd_dim';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'meshDeck_8h_1ac43202a322edb1eeb2099699a7e1f002';
        sec-mem-ref-line = '27';
        sec-mem-ref-name = 'inp::MeshDeck::d_dim';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'mesh_8h_1a0bc255c2a2116ea8d7034094eeda7743';
        sec-mem-ref-line = '250';
        sec-mem-ref-name = 'd_spatialDiscretization';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'meshDeck_8h_1a1361255b8d8b3f62e2aa54d160c631d0';
        sec-mem-ref-line = '38';
        sec-mem-ref-name = 'inp::MeshDeck::d_spatialDiscretization';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'mesh_8h_1a6d82136103859f868f45eec0ee6e1e7f';
        sec-mem-ref-line = '253';
        sec-mem-ref-name = 'd_filename';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'meshDeck_8h_1aea7106cb8d2281466e07d7c83fff32b6';
        sec-mem-ref-line = '41';
        sec-mem-ref-name = 'inp::MeshDeck::d_filename';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'policy_8cpp_1a76c7b62d2e91d2001e29f3fdbd1be3fe';
        sec-mem-ref-line = '23';
        sec-mem-ref-name = 'inp::Policy::getInstance';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'policy_8cpp_1a77642f9e383db304a59ee56766b138fe';
        sec-mem-ref-line = '73';
        sec-mem-ref-name = 'inp::Policy::addToTags';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'mesh_8cpp_1a8b55aafd64acff577fb9285ce473bdb0';
        sec-mem-ref-line = '55';
        sec-mem-ref-name = 'createData';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1Mesh_1a34ffe327272d99ace79c46cb97f11cae';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_dim';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
      sec-mem-desc-line = '240';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mesh deck.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Dimension  
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'mesh_8cpp_1a8b55aafd64acff577fb9285ce473bdb0';
        sec-mem-ref-line = '55';
        sec-mem-ref-name = 'createData';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'mesh_8cpp_1a276becd880bf4c57e9301e2006186697';
        sec-mem-ref-line = '114';
        sec-mem-ref-name = 'getDimension';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'mesh_8cpp_1a0041afbb7d7e94bfb01c108e460196fb';
        sec-mem-ref-line = '15';
        sec-mem-ref-name = 'Mesh';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1Mesh_1a0bc255c2a2116ea8d7034094eeda7743';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::string
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_spatialDiscretization';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
      sec-mem-desc-line = '250';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Tag for spatial discretization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
List of allowed values are:
- finite_difference
- weak_finite_element
- nodal_finite_element
- truss_finite_element
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'mesh_8cpp_1a8b55aafd64acff577fb9285ce473bdb0';
        sec-mem-ref-line = '55';
        sec-mem-ref-name = 'createData';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'mesh_8cpp_1a0041afbb7d7e94bfb01c108e460196fb';
        sec-mem-ref-line = '15';
        sec-mem-ref-name = 'Mesh';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1Mesh_1a6d82136103859f868f45eec0ee6e1e7f';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::string
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_filename';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
      sec-mem-desc-line = '253';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Filename to read mesh data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'mesh_8cpp_1a0041afbb7d7e94bfb01c108e460196fb';
        sec-mem-ref-line = '15';
        sec-mem-ref-name = 'Mesh';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1Mesh_1af60af983b91daddf1e37b0583aee14d8';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_numDofs';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
      sec-mem-desc-line = '256';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Number of dofs = Dimension times number of nodes.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'mesh_8cpp_1afe2de342533eac573cc2a00cfbee3bb7';
        sec-mem-ref-line = '118';
        sec-mem-ref-name = 'getNumDofs';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1Mesh_1ab6dd758801f00338822374341586ff81';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< size_t >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_gMap';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
      sec-mem-desc-line = '267';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Map from global reduced id to default global id.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Each free dof has associated global id, which we refer to as "global
reduced id", and d_gMap provides a map from global reduced id to
default global id.

@note Needed only when the discretization is "weak_finite_element" for
assembly of the mass matrix.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1Mesh_1ae5daf3bae2536118afbec9f4400ffa8f';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< int >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_gInvMap';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
      sec-mem-desc-line = '273';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Map from Default global id to global reduced global id.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This is inverse of d_gMap
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1Mesh_1a5ea864db70a4b7682992d65e66777a6e';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::pair< std::vector< double >, std::vector< double > >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_bbox';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
      sec-mem-desc-line = '276';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Bounding box.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
  cp-fileline  = '45';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class for mesh data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
In this class the mesh data such as nodes, element-node connectivity,
node-element connectivity are stored. The class also stores fixity mask of
nodes which indicate if x-, y-, or z-dof of the node is fixed or free.

We currently only support mesh with only one type of elements, i.e. mesh
can not have mix of two types of elements. For example, we can not have
mesh with triangle and quadrangle elements together.

This class is used in both finite difference implementation and finite
element implementation. For finite difference, we only require nodal
volume. If the mesh file contains nodal volume, we skip reading
element-node and node-element connectivity, however if mesh file does not
have nodal volume data, we read connectivity data and compute nodal volume
and then delete the connectivity data.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 225;
        node-label = 'fe::Mesh';
        node-link = {
          node-link-id = 'classfe_1_1Mesh';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1MeshDeck';
  cp-name   = 'inp::MeshDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1MeshDeck_1ae13c4a396e6c20b2d1b2f1f917d09098';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MeshDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/meshDeck.h';
      sec-mem-desc-line = '48';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/meshDeck.h';
  cp-fileline  = '19';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store mesh related input data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 227;
        node-label = 'inp::MeshDeck';
        node-link = {
          node-link-id = 'structinp_1_1MeshDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classmodel_1_1Model';
  cp-name   = 'model::Model';
  cp-ref     = {
    ref-type = derived;
    ref-id   = 'classmodel_1_1FDModel';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/model/model.h';
  cp-fileline  = '36';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A base class for different models.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
This class provides a base for specific models, such as FDModel.
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 228;
        node-label = 'model::Model';
        node-link = {
          node-link-id = 'classmodel_1_1Model';
        };
      }; /* node */
      node = {
        node-id    = 229;
        node-label = 'model::FDModel';
        node-link = {
          node-link-id = 'classmodel_1_1FDModel';
        };
        node-child = {
          child-id = '228';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 230;
        node-label = 'model::Model';
        node-link = {
          node-link-id = 'classmodel_1_1Model';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1ModelDeck';
  cp-name   = 'inp::ModelDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1ModelDeck_1a9c2955c1353d6b534c2813e523445bfd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ModelDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/modelDeck.h';
      sec-mem-desc-line = '86';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/modelDeck.h';
  cp-fileline  = '19';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store model related data input.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 232;
        node-label = 'inp::ModelDeck';
        node-link = {
          node-link-id = 'structinp_1_1ModelDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classrw_1_1reader_1_1MshReader';
  cp-name   = 'rw::reader::MshReader';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classrw_1_1reader_1_1MshReader_1ac19358f63becf6839c6471d2b233a808';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MshReader';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::string &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'filename';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/mshReader.h';
      sec-mem-desc-line = '28';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param filename name of mesh file
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classrw_1_1reader_1_1MshReader_1a7d8a018026e3f439899ea3caab7191d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'readMesh';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'dim';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 > *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'element_type';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'num_elem';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< size_t > *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'enc';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< size_t >> *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nec';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< double > *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'volumes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'is_fd';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
false
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/mshReader.h';
      sec-mem-desc-line = '42';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reads mesh data into node file and element file.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param dim Dimension
@param nodes vector of nodes data
@param element_type type of element
@param num_elem number of elements
@param enc vector holding element-node connectivity
@param nec vector holding node-element connectivity
@param volumes vector holding volume of the nodes
@param is_fd flag indicating if this mesh is for finite_difference
simulation
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'mshReader_8h_1ac82f8e5541ed503618635ea534986d4f';
        sec-mem-ref-line = '54';
        sec-mem-ref-name = 'd_filename';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'feElementDefs_8h_1ga666ce5c91b00b12d9728aefb1ecbc683';
        sec-mem-ref-line = '89';
        sec-mem-ref-name = 'util::msh_map_element_to_num_nodes';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'reader_8cpp_1ae1d467da75a47df964d46c85fc1cd2ea';
        sec-mem-ref-line = '71';
        sec-mem-ref-name = 'rw::reader::readMshFile';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/mshReader.h';
  cp-fileline  = '21';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to read Gmsh (msh) mesh files.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 234;
        node-label = 'rw::reader::MshReader';
        node-link = {
          node-link-id = 'classrw_1_1reader_1_1MshReader';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
class = {
  cp-id     = 'classgeometry_1_1Neighbor';
  cp-name   = 'geometry::Neighbor';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classgeometry_1_1Neighbor_1ac09a3162359c0fb78dcdae3e960d3e78';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Neighbor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::NeighborDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/neighbor.h';
      sec-mem-desc-line = '35';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck Input deck which contains user-specified information
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classgeometry_1_1Neighbor_1a51359a8f499d92154607da526271d680';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
inp::NeighborDeck *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_neighborDeck_p';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/neighbor.h';
      sec-mem-desc-line = '39';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Interior flags deck.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classgeometry_1_1Neighbor_1a89cde323bba67a3131990626136b3310';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< size_t > >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_neighbors';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/neighbor.h';
      sec-mem-desc-line = '42';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Vector of list of neighbors for each node.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/neighbor.h';
  cp-fileline  = '28';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to store neighbor list and provide access to the list.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Currently, nested vector is used for list. However, this is not memory
efficient, as the vectors have small memory overhead and the total
overhead then is N times the overhead of vector, where N is the number of
nodes. When N is large, the total overhead becomes very large.

@note Require further memory optimization.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 237;
        node-label = 'inp::NeighborDeck';
        node-link = {
          node-link-id = 'structinp_1_1NeighborDeck';
        };
      }; /* node */
      node = {
        node-id    = 236;
        node-label = 'geometry::Neighbor';
        node-link = {
          node-link-id = 'classgeometry_1_1Neighbor';
        };
        node-child = {
          child-id = '237';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_neighborDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1NeighborDeck';
  cp-name   = 'inp::NeighborDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1NeighborDeck_1ab6864af7f94040c7a3c664a9b2a6c5c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'NeighborDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/neighborDeck.h';
      sec-mem-desc-line = '42';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/neighborDeck.h';
  cp-fileline  = '17';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store neighbor list related input data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 239;
        node-label = 'inp::NeighborDeck';
        node-link = {
          node-link-id = 'structinp_1_1NeighborDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structinp_1_1OutputDeck';
  cp-name   = 'inp::OutputDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1OutputDeck_1a3b1cac5638616c7a3e77d6a013d54fd6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OutputDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/outputDeck.h';
      sec-mem-desc-line = '56';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/outputDeck.h';
  cp-fileline  = '20';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store output data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 241;
        node-label = 'inp::OutputDeck';
        node-link = {
          node-link-id = 'structinp_1_1OutputDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structutil_1_1Point3';
  cp-name   = 'util::Point3';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structutil_1_1Point3_1a5dccfcf3a59260d7f36b1c01a2ebd13b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Point3';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      sec-mem-desc-line = '38';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structutil_1_1Point3_1a30f5ec8bd80e2948ea0ddbc03d0ea155';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Point3';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'x';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'y';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'z';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      sec-mem-desc-line = '46';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param x The x coordinate
@param y The y coordinate
@param z The z coordinate
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structutil_1_1Point3_1a88ade487da8fc45dc644cf26c08c9fd4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'length';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      sec-mem-desc-line = '52';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Computes the Euclidean length of the vector.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return Length Euclidean length of the vector
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structutil_1_1Point3_1ab07305d6e8eb1719243e84753bab0eb6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dot';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
Point3
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'b';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Computes the dot product of this vector with another point.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param b Another vector
@return Value a dot product
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a99902abbfaf692efae059e3b3e2f5a2d';
        sec-mem-ref-line = '27';
        sec-mem-ref-name = 'd_x';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a9bd3abb1e6985140d97c360f6ff6df04';
        sec-mem-ref-line = '30';
        sec-mem-ref-name = 'd_y';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1ad6ad2453c2054e0ceb7d9e484a6e0cb4';
        sec-mem-ref-line = '33';
        sec-mem-ref-name = 'd_z';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structutil_1_1Point3_1a99902abbfaf692efae059e3b3e2f5a2d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_x';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      sec-mem-desc-line = '27';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
the x coordinate
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a62dd1b5423b9969c3ef8beb5d6248ffd';
        sec-mem-ref-line = '38';
        sec-mem-ref-name = 'fe::QuadElem::getShapes';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a147a7af7dec5af2c1f0afa21f3ec8054';
        sec-mem-ref-line = '50';
        sec-mem-ref-name = 'fe::QuadElem::getDerShapes';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1ae9257e685f04b81181f542a20f7928ba';
        sec-mem-ref-line = '73';
        sec-mem-ref-name = 'fe::QuadElem::mapRefElemToElem';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1a2b621b2e845984a3e069a1d93ae5f8b7';
        sec-mem-ref-line = '38';
        sec-mem-ref-name = 'fe::TriElem::getShapes';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1a25a89ef94663b42ae0cb6269ecf08b60';
        sec-mem-ref-line = '57';
        sec-mem-ref-name = 'fe::TriElem::mapRefElemToElem';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'point_8h_1ab07305d6e8eb1719243e84753bab0eb6';
        sec-mem-ref-line = '59';
        sec-mem-ref-name = 'dot';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structutil_1_1Point3_1a9bd3abb1e6985140d97c360f6ff6df04';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_y';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      sec-mem-desc-line = '30';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
the y coordinate
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a62dd1b5423b9969c3ef8beb5d6248ffd';
        sec-mem-ref-line = '38';
        sec-mem-ref-name = 'fe::QuadElem::getShapes';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a147a7af7dec5af2c1f0afa21f3ec8054';
        sec-mem-ref-line = '50';
        sec-mem-ref-name = 'fe::QuadElem::getDerShapes';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1ae9257e685f04b81181f542a20f7928ba';
        sec-mem-ref-line = '73';
        sec-mem-ref-name = 'fe::QuadElem::mapRefElemToElem';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1a2b621b2e845984a3e069a1d93ae5f8b7';
        sec-mem-ref-line = '38';
        sec-mem-ref-name = 'fe::TriElem::getShapes';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1a25a89ef94663b42ae0cb6269ecf08b60';
        sec-mem-ref-line = '57';
        sec-mem-ref-name = 'fe::TriElem::mapRefElemToElem';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'point_8h_1ab07305d6e8eb1719243e84753bab0eb6';
        sec-mem-ref-line = '59';
        sec-mem-ref-name = 'dot';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structutil_1_1Point3_1ad6ad2453c2054e0ceb7d9e484a6e0cb4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_z';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      sec-mem-desc-line = '33';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
the z coordinate
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'point_8h_1ab07305d6e8eb1719243e84753bab0eb6';
        sec-mem-ref-line = '59';
        sec-mem-ref-name = 'dot';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
  cp-fileline  = '24';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A structure to represent 3d vectors.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 243;
        node-label = 'util::Point3';
        node-link = {
          node-link-id = 'structutil_1_1Point3';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classinp_1_1Policy';
  cp-name   = 'inp::Policy';
  cp-section = {
    sec-kind = 'private-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classinp_1_1Policy_1ae7c2d25bbafa7bc666effffb5bc47837';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Policy';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.h';
      sec-mem-desc-line = '102';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Private constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'policy_8h_1a008fc5f88f6e77c0a5f9d4212496f9ac';
        sec-mem-ref-line = '138';
        sec-mem-ref-name = 'd_policyDeck_p';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'policyDeck_8h_1a41a35d41d28f22fc80ec6b046e2ebc75';
        sec-mem-ref-line = '32';
        sec-mem-ref-name = 'inp::PolicyDeck::d_memControlFlag';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'policy_8cpp_1af09095f8c4eab2178d5ec7186fbe0a76';
        sec-mem-ref-line = '52';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classinp_1_1Policy_1a150ece82d9af2dc5b74d7ccee297ee43';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Policy';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
inp::PolicyDeck *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'deck';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.h';
      sec-mem-desc-line = '108';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Private constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param deck Input deck which contains user-specified information
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'policy_8h_1a008fc5f88f6e77c0a5f9d4212496f9ac';
        sec-mem-ref-line = '138';
        sec-mem-ref-name = 'd_policyDeck_p';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'policy_8cpp_1af09095f8c4eab2178d5ec7186fbe0a76';
        sec-mem-ref-line = '52';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classinp_1_1Policy_1aa95cc89ef87af865f877a53c57676fec';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Policy';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
Policy const &
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.h';
      sec-mem-desc-line = '111';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Private operator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classinp_1_1Policy_1a5ed612f0d5cd47a82d924acba6e81fc2';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
const Policy &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Policy &
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.h';
      sec-mem-desc-line = '114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Private operator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classinp_1_1Policy_1a1a0cfa71f7ad125e5f239057c4c77214';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = '~Policy';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.h';
      sec-mem-desc-line = '117';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Private destructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'policy_8cpp_1ae7c2d25bbafa7bc666effffb5bc47837';
        sec-mem-ref-line = '39';
        sec-mem-ref-name = 'Policy';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.h';
  cp-fileline  = '35';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to enforce certain policies to reduce memory loads.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
This class introduces policies which restrict population (declaration) of
post-processing data which are not important for running simulation and
are postprocessing data.

For example, if the simulation is large, this class will restrict
population of data such as fracture energy, damage data, strain and stress
data, etc.

This class also enforces lumping approximation of mass matrix if the level
of restriction is set to 2 or higher.

The level of memory restriction can be set in the input file. Default
value is 0 which means no restriction.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 245;
        node-label = 'inp::Policy';
        node-link = {
          node-link-id = 'classinp_1_1Policy';
        };
        node-child = {
          child-id = '246';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_policyDeck_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '245';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
-d_instance_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 246;
        node-label = 'inp::PolicyDeck';
        node-link = {
          node-link-id = 'structinp_1_1PolicyDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1PolicyDeck';
  cp-name   = 'inp::PolicyDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1PolicyDeck_1a6ea180b10d419fe585ee8f96666c3412';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PolicyDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/policyDeck.h';
      sec-mem-desc-line = '39';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/policyDeck.h';
  cp-fileline  = '19';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store policy related input data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 248;
        node-label = 'inp::PolicyDeck';
        node-link = {
          node-link-id = 'structinp_1_1PolicyDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structfe_1_1QuadData';
  cp-name   = 'fe::QuadData';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structfe_1_1QuadData_1a39458a015b89c32616630aebaf38dd3f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QuadData';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadData.h';
      sec-mem-desc-line = '46';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structfe_1_1QuadData_1a55af605a55d8cdb9ded351dc70ba9435';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_w';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadData.h';
      sec-mem-desc-line = '17';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Quadrature weight.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'fe::QuadElem::init';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'fe::TriElem::init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structfe_1_1QuadData_1aa50baad14d8c6414fe7101900dde6163';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
util::Point3
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_p';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadData.h';
      sec-mem-desc-line = '20';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Quadrature point in 2-d or 3-d.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'fe::QuadElem::init';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'fe::TriElem::init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structfe_1_1QuadData_1a03f0a01b0fb8423dfa1fa09474ff8911';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< double >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_shapes';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadData.h';
      sec-mem-desc-line = '28';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Value of shape functions at quad point p.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Size will be the number of vertices the element has. E.g. for triangle
element shapes will have three entries.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'fe::TriElem::init';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'fe::QuadElem::init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structfe_1_1QuadData_1a297099c6e1290ecd6e28e7a5ba1ba527';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< double > >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_derShapes';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadData.h';
      sec-mem-desc-line = '41';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Value of derivative of shape functions at quad point p.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Size will be the number of vertices the element has. E.g. for triangle
element shapes will have three entries.

x-derivative of ith shape function is d_derShapes[i][0]

y-derivative of ith shape function is d_derShapes[i][1]
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'fe::TriElem::init';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'fe::QuadElem::init';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadData.h';
  cp-fileline  = '14';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A struct to store the quadrature data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 251;
        node-label = 'util::Point3';
        node-link = {
          node-link-id = 'structutil_1_1Point3';
        };
      }; /* node */
      node = {
        node-id    = 250;
        node-label = 'fe::QuadData';
        node-link = {
          node-link-id = 'structfe_1_1QuadData';
        };
        node-child = {
          child-id = '251';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
+d_p
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classfe_1_1QuadElem';
  cp-name   = 'fe::QuadElem';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'classfe_1_1BaseElem';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1QuadElem_1ad381572e301e91f0e85b131e9e2a2f69';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QuadElem';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'order';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadElem.h';
      sec-mem-desc-line = '33';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor for quadrangle element.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param order Order of quadrature point approximation
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1QuadElem_1a17d1ad9d7bceb040588300ed7f854d4e';
      sec-mem-virt = virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< fe::QuadData >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getQuadPoints';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadElem.h';
      sec-mem-desc-line = '46';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get vector of quadrature data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Given vertices of an element, where element type is same as what is
specified in the constructor of Quadrature class, it returns the vector
of quadrature data.

@param nodes Vector of vertices of an element
@return Vector of QuadData
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'baseElem_8h_1a7dd13e1c51541c54a229244a56b0a64b';
        sec-mem-ref-line = '114';
        sec-mem-ref-name = 'fe::BaseElem::d_quads';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'quadElem_8cpp_1ae9257e685f04b81181f542a20f7928ba';
        sec-mem-ref-line = '73';
        sec-mem-ref-name = 'mapRefElemToElem';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1QuadElem_1a62dd1b5423b9969c3ef8beb5d6248ffd';
      sec-mem-virt = virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< double >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getShapes';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadElem.h';
      sec-mem-desc-line = '64';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the values of shape function at point p for quadrangle
element.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Quadrangle assumed is a reference quadrangle with vertices v1 = (-1,-1),
v2 =(1,-1), v3 = (1,1), v4 = (-1,1). The shape function for the reference
quadrangle is given by
 \form#7@_fakenl
 \form#8@_fakenl@_fakenl

@param p Location of point
@return Vector of shape functions at point p
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a99902abbfaf692efae059e3b3e2f5a2d';
        sec-mem-ref-line = '27';
        sec-mem-ref-name = 'util::Point3::d_x';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a9bd3abb1e6985140d97c360f6ff6df04';
        sec-mem-ref-line = '30';
        sec-mem-ref-name = 'util::Point3::d_y';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1QuadElem_1a147a7af7dec5af2c1f0afa21f3ec8054';
      sec-mem-virt = virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< double > >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getDerShapes';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadElem.h';
      sec-mem-desc-line = '85';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the values of derivative of shape function for
quadrangle element at point p.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
For bi-linear quadrangle element, derivative of shape functions are
linear and are as follows (for reference quadrangle)

 \form#9@_fakenl
 \form#10@_fakenl
 \form#11@_fakenl
 \form#12@_fakenl

@param p Point at which derivatives are to be evaluated
@return Vector of derivative of shape functions
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a9bd3abb1e6985140d97c360f6ff6df04';
        sec-mem-ref-line = '30';
        sec-mem-ref-name = 'util::Point3::d_y';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a99902abbfaf692efae059e3b3e2f5a2d';
        sec-mem-ref-line = '27';
        sec-mem-ref-name = 'util::Point3::d_x';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a81c559a55ceabb662b6ad8f8a2312ec8';
        sec-mem-ref-line = '90';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1QuadElem_1ae9257e685f04b81181f542a20f7928ba';
      sec-mem-virt = virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mapRefElemToElem';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< double > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'shapes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< std::vector< double >> &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'der_shapes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadElem.h';
      sec-mem-desc-line = '117';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Maps the point on reference quadrangle to given quadrangle and
returns determinant of Jacobian.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
For linear triangle element, the map from \form#13 to \form#14@_fakenl coordinate is given by
 \form#15
 \form#16
where \form#17 are described in getTriShapes() and \form#18@_fakenl are vertices of given triangle.

Jacobian of this map is a matrix
 \form#19@_fakenl
and determinant of Jacobian is
 \form#20@_fakenl

It can be easily checked than for linear triangle elements, we simply have
 \form#21
 \form#22
Therefore,
 \form#23

@param p Given point in reference triangle which is to be mapped
@param shapes Vector shape functions evaluated at the point p
@param der_shapes Vector of derivative of shape functions at point p
@param nodes Coordinates of vertices of a given element   *
@return det(J) Determinant of the Jacobian
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a99902abbfaf692efae059e3b3e2f5a2d';
        sec-mem-ref-line = '27';
        sec-mem-ref-name = 'util::Point3::d_x';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a9bd3abb1e6985140d97c360f6ff6df04';
        sec-mem-ref-line = '30';
        sec-mem-ref-name = 'util::Point3::d_y';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'quadElem_8cpp_1a17d1ad9d7bceb040588300ed7f854d4e';
        sec-mem-ref-line = '17';
        sec-mem-ref-name = 'getQuadPoints';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadElem.h';
  cp-fileline  = '26';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class for quadrature related operations for bi-linear quadrangle
element.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
This class provides methods such as quadrature points for integration,
shape functions at quadrature points, and derivative of shape functions.
They are specific to linear quadrangle element.

The reference quadrangle element is made of four vertex at point \form#6@_fakenl.
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 253;
        node-label = 'fe::BaseElem';
        node-link = {
          node-link-id = 'classfe_1_1BaseElem';
        };
      }; /* node */
      node = {
        node-id    = 252;
        node-label = 'fe::QuadElem';
        node-link = {
          node-link-id = 'classfe_1_1QuadElem';
        };
        node-child = {
          child-id = '253';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 255;
        node-label = 'fe::BaseElem';
        node-link = {
          node-link-id = 'classfe_1_1BaseElem';
        };
      }; /* node */
      node = {
        node-id    = 254;
        node-label = 'fe::QuadElem';
        node-link = {
          node-link-id = 'classfe_1_1QuadElem';
        };
        node-child = {
          child-id = '255';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
class = {
  cp-id     = 'classfe_1_1Quadrature';
  cp-name   = 'fe::Quadrature';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Quadrature_1a4d54d3607bd9ad78343d5a72ec3f2e3d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Quadrature';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'order';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '39';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param order Order of quadrature approximation
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Quadrature_1a1326432415f2cd0a2c3bcef8c11bea34';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getElemType';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '45';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get element type.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return type Type of element
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Quadrature_1a9aae9d69a806601c56e759911d7547e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getQuadOrder';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '51';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get order of quadrature approximation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return order Order of approximation
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Quadrature_1ac290cfa79038b9acaecca60ca4b9f002';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNumQuadPoints';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '57';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get number of quadrature points in the data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return N Number of quadrature points
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Quadrature_1aa99fbde036a1ab6f5604d3303d031e62';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< double >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getShapes';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '65';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the values of shape function at point p.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param p Location of point
@return Vector of shape functions at point p
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Quadrature_1a26ebafbea7e086aef8ec050f76c12228';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< double > >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getDerShapes';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '74';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the values of derivative of shape function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param p Location of point
@return Vector of derivative of shape functions
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Quadrature_1a3c1f6ec665f4aa5af313d52a1cb401b0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mapRefElemToElem';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< double > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'shapes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< std::vector< double >> &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'der_shapes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '87';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Maps the point on reference element to given element and
returns the determinant of Jacobian.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param p Given point in reference element which is to be mapped
@param shapes Vector shape functions evaluated at the point p
@param der_shapes Vector of derivative of shape functions at point p
@param nodes Coordinates of vertices of a given element
@return det(J) Determinant of the Jacobian
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1Quadrature_1a4f07150114e1232b562ba7371dabf5f3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< fe::QuadData >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getQuadPoints';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '108';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get vector of quadrature data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Given vertices of an element, where element type is same as what is
specified in the constructor of Quadrature class, it returns the vector
of quadrature data.

@param nodes Vector of vertices of an element
@return Vector of QuadData

@note This depends on the element type that is already set in the
constructor of Quadrature class.

@note Caller needs to ensure that order does not go higher than 5 as at
present only upto fifth order quadrature points are implemented.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'testFeLib_8cpp_1ga9d701a802ca6f16e630b09dfefbaa847';
        sec-mem-ref-line = '62';
        sec-mem-ref-name = 'testTriRef';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classfe_1_1Quadrature_1a8a6b9ab1096b618786c3b26925c77fc5';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
T *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_element_p';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
      sec-mem-desc-line = '112';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Element which computes quadrature point and shape functions.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
  cp-fileline  = '32';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class for quadrature related operations.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
In this class we store the global quadrature approximation information
such as order of quadrature approximation, number of quadrature point per
element, quadrature data for reference element.

This class also provides method for obtaining quadrature points and
quadrature weights.

@note Currently, only triangle and quadrangle elements are supported.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 257;
        node-label = 'fe::Quadrature< T >';
        node-link = {
          node-link-id = 'classfe_1_1Quadrature';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
struct = {
  cp-id     = 'structinp_1_1QuadratureDeck';
  cp-name   = 'inp::QuadratureDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1QuadratureDeck_1a7b22f57062e3934a47e4abb5c9513ca8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'QuadratureDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/quadratureDeck.h';
      sec-mem-desc-line = '38';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/quadratureDeck.h';
  cp-fileline  = '17';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store quadrature point related input data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 259;
        node-label = 'inp::QuadratureDeck';
        node-link = {
          node-link-id = 'structinp_1_1QuadratureDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structinp_1_1SolverDeck';
  cp-name   = 'inp::SolverDeck';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structinp_1_1SolverDeck_1a1c7540999e48a72333203fedaf561609';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SolverDeck';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/solverDeck.h';
      sec-mem-desc-line = '41';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/solverDeck.h';
  cp-fileline  = '20';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure to read and store solver related input data.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 261;
        node-label = 'inp::SolverDeck';
        node-link = {
          node-link-id = 'structinp_1_1SolverDeck';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structutil_1_1SymMatrix3';
  cp-name   = 'util::SymMatrix3';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'structutil_1_1SymMatrix3_1a75cfa588a6ec12fed154d712f4cd76e8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SymMatrix3';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrix.h';
      sec-mem-desc-line = '87';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrix.h';
  cp-fileline  = '57';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A structure to represent 3d symmetric matrices.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 263;
        node-label = 'util::SymMatrix3';
        node-link = {
          node-link-id = 'structutil_1_1SymMatrix3';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
class = {
  cp-id     = 'classfe_1_1TriElem';
  cp-name   = 'fe::TriElem';
  cp-ref     = {
    ref-type = base;
    ref-id   = 'classfe_1_1BaseElem';
    ref-prot = public;
    ref-virt = non-virtual;
  };
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1TriElem_1af9752d0cc25622f593ee8ac19fd990b3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'TriElem';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'order';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/triElem.h';
      sec-mem-desc-line = '32';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor for triangle element.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param order Order of quadrature point approximation
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1TriElem_1ad9ee36384ad54b3cab72215fc5fbd096';
      sec-mem-virt = virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< fe::QuadData >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getQuadPoints';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/triElem.h';
      sec-mem-desc-line = '45';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get vector of quadrature data.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Given vertices of an element, where element type is same as what is
specified in the constructor of Quadrature class, it returns the vector
of quadrature data.

@param nodes Vector of vertices of an element
@return Vector of QuadData
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'baseElem_8h_1a7dd13e1c51541c54a229244a56b0a64b';
        sec-mem-ref-line = '114';
        sec-mem-ref-name = 'fe::BaseElem::d_quads';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'triElem_8cpp_1a25a89ef94663b42ae0cb6269ecf08b60';
        sec-mem-ref-line = '57';
        sec-mem-ref-name = 'mapRefElemToElem';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1TriElem_1a2b621b2e845984a3e069a1d93ae5f8b7';
      sec-mem-virt = virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< double >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getShapes';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/triElem.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the values of shape function at point p for triangle element.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Triangle assumed is a reference triangle with vertices v1 = (0,0), v2 =
(1,0), v3 = (0,1). The shape function for the reference triangle is
given by
 \form#25@_fakenl

@param p Location of point
@return Vector of shape functions at point p
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a99902abbfaf692efae059e3b3e2f5a2d';
        sec-mem-ref-line = '27';
        sec-mem-ref-name = 'util::Point3::d_x';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a9bd3abb1e6985140d97c360f6ff6df04';
        sec-mem-ref-line = '30';
        sec-mem-ref-name = 'util::Point3::d_y';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1TriElem_1ab65073f12233b4b8777b94b1ad3671f1';
      sec-mem-virt = virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< double > >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getDerShapes';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/triElem.h';
      sec-mem-desc-line = '78';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the values of derivative of shape function for
triangle element.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
For linear triangle element, derivative of shape functions are constant
and are as follows (for reference triangle)

 \form#26@_fakenl
 \form#27@_fakenl
 \form#28@_fakenl

@param p Location of point
@return Vector of derivative of shape functions
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ababf2fd56dbfa0d40e8808ee6526c5f2';
        sec-mem-ref-line = '74';
        sec-mem-ref-name = 'init';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classfe_1_1TriElem_1a25a89ef94663b42ae0cb6269ecf08b60';
      sec-mem-virt = virtual;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mapRefElemToElem';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
util::Point3 &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< double > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'shapes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< std::vector< double >> &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'der_shapes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/triElem.h';
      sec-mem-desc-line = '110';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Maps the point on reference triangle to given triangle and
returns determinant of Jacobian.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
For linear triangle element, the map from \form#13 to \form#14@_fakenl coordinate is given by
 \form#15
 \form#16
where \form#17 are described in getTriShapes() and \form#18@_fakenl are vertices of given triangle.

Jacobian of this map is a matrix
 \form#19@_fakenl
and determinant of Jacobian is
 \form#20@_fakenl

It can be easily checked than for linear triangle elements, we simply have
 \form#21
 \form#22
Therefore,
 \form#23

@param p Given point in reference triangle which is to be mapped
@param shapes Vector shape functions evaluated at the point p
@param der_shapes Vector of derivative of shape functions at point p
@param nodes Coordinates of vertices of a given element   *
@return det(J) Determinant of the Jacobian
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a99902abbfaf692efae059e3b3e2f5a2d';
        sec-mem-ref-line = '27';
        sec-mem-ref-name = 'util::Point3::d_x';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'point_8h_1a9bd3abb1e6985140d97c360f6ff6df04';
        sec-mem-ref-line = '30';
        sec-mem-ref-name = 'util::Point3::d_y';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'triElem_8cpp_1ad9ee36384ad54b3cab72215fc5fbd096';
        sec-mem-ref-line = '17';
        sec-mem-ref-name = 'getQuadPoints';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/triElem.h';
  cp-fileline  = '25';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class for quadrature related operations for linear triangle element.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
This class provides methods such as quadrature points for integration,
shape functions at quadrature points, and derivative of shape functions.
They are specific to linear triangle element.

The reference triangle element is made of three vertex at point \form#24@_fakenl.
_EnD_oF_dEf_TeXt_;
  cp-inheritancegraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 264;
        node-label = 'fe::TriElem';
        node-link = {
          node-link-id = 'classfe_1_1TriElem';
        };
        node-child = {
          child-id = '265';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 265;
        node-label = 'fe::BaseElem';
        node-link = {
          node-link-id = 'classfe_1_1BaseElem';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 266;
        node-label = 'fe::TriElem';
        node-link = {
          node-link-id = 'classfe_1_1TriElem';
        };
        node-child = {
          child-id = '267';
          relation = public-inheritance;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 267;
        node-label = 'fe::BaseElem';
        node-link = {
          node-link-id = 'classfe_1_1BaseElem';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
class = {
  cp-id     = 'classrw_1_1reader_1_1VtkReader';
  cp-name   = 'rw::reader::VtkReader';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classrw_1_1reader_1_1VtkReader_1ab368c92bebcab3859293eee1d3d6f8ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'VtkReader';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::string &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'filename';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/vtkReader.h';
      sec-mem-desc-line = '31';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Constructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param filename name of mesh file
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'vtkReader_8h_1a4386764b5cc142e1c99bb779f3e57018';
        sec-mem-ref-line = '60';
        sec-mem-ref-name = 'd_count';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'vtkReader_8h_1ae7cc5c03b3632c42ac5bed66e41e9d84';
        sec-mem-ref-line = '63';
        sec-mem-ref-name = 'd_reader_p';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classrw_1_1reader_1_1VtkReader_1ae5d7706b762ee7af7c5f0165a26e148f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'readMesh';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'dim';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 > *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nodes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'element_type';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'num_elem';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< size_t > *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'enc';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< size_t >> *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nec';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< double > *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'volumes';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'is_fd';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
false
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/vtkReader.h';
      sec-mem-desc-line = '45';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reads mesh data into node file and element file.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param dim Dimension
@param nodes vector of nodes data
@param element_type type of element
@param num_elem number of elements
@param enc vector holding element-node connectivity
@param nec vector holding node-element connectivity
@param volumes vector holding volume of the nodes
@param is_fd flag indicating if this mesh is for finite_difference
simulation
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'vtkReader_8h_1af578e6f541c9478eaf738c773bd636a3';
        sec-mem-ref-line = '66';
        sec-mem-ref-name = 'd_grid_p';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'vtkReader_8h_1ae7cc5c03b3632c42ac5bed66e41e9d84';
        sec-mem-ref-line = '63';
        sec-mem-ref-name = 'd_reader_p';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = 'feElementDefs_8h_1ga128305c3997f5bf379c9a7550ef0b80a';
        sec-mem-ref-line = '54';
        sec-mem-ref-name = 'util::vtk_map_element_to_num_nodes';
    };
      sec-mem-referenceby = {
        sec-mem-ref-id = 'reader_8cpp_1a06f5f2e42c7507cb34b9b7f4817af82b';
        sec-mem-ref-line = '59';
        sec-mem-ref-name = 'rw::reader::readVtuFile';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classrw_1_1reader_1_1VtkReader_1a37637d27bc56ccb4f9a0a929caa7b355';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'close';
      sec-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/vtkReader.h';
      sec-mem-desc-line = '51';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Close the file.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'reader_8cpp_1a06f5f2e42c7507cb34b9b7f4817af82b';
        sec-mem-ref-line = '59';
        sec-mem-ref-name = 'rw::reader::readVtuFile';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/vtkReader.h';
  cp-fileline  = '24';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
A class to read vtk (vtu) mesh files.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
@note Depends on VTK library.
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 269;
        node-label = 'rw::reader::VtkReader';
        node-link = {
          node-link-id = 'classrw_1_1reader_1_1VtkReader';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
file = {
  file-id   = 'README_8md';
  file-name = 'README.md';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/README.md';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'baseElem_8cpp';
  file-name = 'baseElem.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'baseElem_8h';
  file-name = 'baseElem.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/baseElem.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'massMatrix_8cpp';
  file-name = 'massMatrix.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/massMatrix.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'massMatrix_8h';
  file-name = 'massMatrix.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/massMatrix.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'mesh_8cpp';
  file-name = 'mesh.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'mesh_8h';
  file-name = 'mesh.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/mesh.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'quadData_8h';
  file-name = 'quadData.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadData.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'quadElem_8cpp';
  file-name = 'quadElem.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadElem.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'quadElem_8h';
  file-name = 'quadElem.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadElem.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'quadrature_8cpp';
  file-name = 'quadrature.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'quadrature_8h';
  file-name = 'quadrature.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/quadrature.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'triElem_8cpp';
  file-name = 'triElem.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/triElem.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'triElem_8h';
  file-name = 'triElem.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/fe/triElem.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'fracture_8cpp';
  file-name = 'fracture.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/fracture.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'fracture_8h';
  file-name = 'fracture.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/fracture.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'interiorFlags_8cpp';
  file-name = 'interiorFlags.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/interiorFlags.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'interiorFlags_8h';
  file-name = 'interiorFlags.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/interiorFlags.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'neighbor_8cpp';
  file-name = 'neighbor.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/neighbor.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'neighbor_8h';
  file-name = 'neighbor.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/geometry/neighbor.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'fractureDeck_8h';
  file-name = 'fractureDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/fractureDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'initialConditionDeck_8h';
  file-name = 'initialConditionDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/initialConditionDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'interiorFlagsDeck_8h';
  file-name = 'interiorFlagsDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/interiorFlagsDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'loadingDeck_8h';
  file-name = 'loadingDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/loadingDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'massMatrixDeck_8h';
  file-name = 'massMatrixDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/massMatrixDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'materialDeck_8h';
  file-name = 'materialDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/materialDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'meshDeck_8h';
  file-name = 'meshDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/meshDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'modelDeck_8h';
  file-name = 'modelDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/modelDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'neighborDeck_8h';
  file-name = 'neighborDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/neighborDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'outputDeck_8h';
  file-name = 'outputDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/outputDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'policyDeck_8h';
  file-name = 'policyDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/policyDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'quadratureDeck_8h';
  file-name = 'quadratureDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/quadratureDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'solverDeck_8h';
  file-name = 'solverDeck.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/decks/solverDeck.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'input_8cpp';
  file-name = 'input.cpp';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'input_8cpp_1ac664e52a7177063fa06b4391f1e34651';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'definitelyGreaterThan';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/input.cpp';
      func-mem-desc-line = '24';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/input.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'input_8h';
  file-name = 'input.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/input.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'policy_8cpp';
  file-name = 'policy.cpp';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'policy_8cpp_1a4c232787f0bb319b4c6e4ba6de5a2ac5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'addTag';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::string >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'list';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::string &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'tag';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.cpp';
      func-mem-desc-line = '10';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'policy_8h';
  file-name = 'policy.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/inp/policy.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'initialCondition_8cpp';
  file-name = 'initialCondition.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/loading/initialCondition.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'initialCondition_8h';
  file-name = 'initialCondition.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/loading/initialCondition.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'loading_8cpp';
  file-name = 'loading.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/loading/loading.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'loading_8h';
  file-name = 'loading.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/loading/loading.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'main_8cpp';
  file-name = 'main.cpp';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'main';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'argc';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'argv';
        func-mem-param-array = '[]';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/main.cpp';
      func-mem-desc-line = '15';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Main driver.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/main.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'material_8cpp';
  file-name = 'material.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/material/material.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'material_8h';
  file-name = 'material.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/material/material.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'fDModel_8cpp';
  file-name = 'fDModel.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/model/fd/fDModel.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'fDModel_8h';
  file-name = 'fDModel.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/model/fd/fDModel.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'model_8cpp';
  file-name = 'model.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/model/model.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'model_8h';
  file-name = 'model.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/model/model.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'mshReader_8cpp';
  file-name = 'mshReader.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/mshReader.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'mshReader_8h';
  file-name = 'mshReader.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/mshReader.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'reader_8cpp';
  file-name = 'reader.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/reader.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'reader_8h';
  file-name = 'reader.h';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespacerw_1_1reader_1a4390356883ad2a4f14cb41c69cf3e5ca';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'readCsvFile';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::string &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'filename';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'dim';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 > *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nodes';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< double > *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'volumes';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/reader.h';
      func-mem-desc-line = '39';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reads mesh data into node file and element file.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param filename name of mesh file
@param dim dimension
@param nodes vector of nodes data
@param volumes vector holding volume of the nodes
_EnD_oF_dEf_TeXt_;
      func-mem-referenceby = {
        func-mem-ref-id = 'mesh_8cpp_1a8b55aafd64acff577fb9285ce473bdb0';
        func-mem-ref-line = '55';
        func-mem-ref-name = 'fe::Mesh::createData';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespacerw_1_1reader_1a06f5f2e42c7507cb34b9b7f4817af82b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'readVtuFile';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::string &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'filename';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'dim';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 > *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nodes';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'element_type';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'num_elem';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< size_t > *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'enc';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< size_t >> *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nec';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< double > *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'volumes';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'is_fd';
        func-mem-param-defval = <<_EnD_oF_dEf_TeXt_
false
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/reader.h';
      func-mem-desc-line = '56';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reads mesh data into node file and element file.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param filename name of mesh file
@param dim dimension
@param nodes vector of nodes data
@param element_type type of element
@param num_elem number of elements
@param enc vector holding element-node connectivity
@param nec vector holding node-element connectivity
@param volumes vector holding volume of the nodes
@param is_fd flag indicating if this mesh is for finite_difference
simulation
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'vtkReader_8cpp_1ae5d7706b762ee7af7c5f0165a26e148f';
        func-mem-ref-line = '33';
        func-mem-ref-name = 'rw::reader::VtkReader::readMesh';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'vtkReader_8cpp_1a37637d27bc56ccb4f9a0a929caa7b355';
        func-mem-ref-line = '163';
        func-mem-ref-name = 'rw::reader::VtkReader::close';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'mesh_8cpp_1a8b55aafd64acff577fb9285ce473bdb0';
        func-mem-ref-line = '55';
        func-mem-ref-name = 'fe::Mesh::createData';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespacerw_1_1reader_1ae1d467da75a47df964d46c85fc1cd2ea';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'readMshFile';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::string &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'filename';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'dim';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 > *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nodes';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'element_type';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'num_elem';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< size_t > *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'enc';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< std::vector< size_t >> *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nec';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< double > *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'volumes';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'is_fd';
        func-mem-param-defval = <<_EnD_oF_dEf_TeXt_
false
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/reader.h';
      func-mem-desc-line = '75';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reads mesh data into node file and element file.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param filename name of mesh file
@param dim dimension
@param nodes vector of nodes data
@param element_type type of element
@param num_elem number of elements
@param enc vector holding element-node connectivity
@param nec vector holding node-element connectivity
@param volumes vector holding volume of the nodes
@param is_fd flag indicating if this mesh is for finite_difference
simulation
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'mshReader_8cpp_1a7d8a018026e3f439899ea3caab7191d6';
        func-mem-ref-line = '14';
        func-mem-ref-name = 'rw::reader::MshReader::readMesh';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'mesh_8cpp_1a8b55aafd64acff577fb9285ce473bdb0';
        func-mem-ref-line = '55';
        func-mem-ref-name = 'fe::Mesh::createData';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/reader.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'vtkReader_8cpp';
  file-name = 'vtkReader.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/vtkReader.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'vtkReader_8h';
  file-name = 'vtkReader.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/vtkReader.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'writer_8cpp';
  file-name = 'writer.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/writer.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'writer_8h';
  file-name = 'writer.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/rw/writer.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'testFe_8cpp';
  file-name = 'testFe.cpp';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'testFe_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'main';
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFe.cpp';
      func-mem-desc-line = '9';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFe.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'testFeLib_8cpp';
  file-name = 'testFeLib.cpp';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__TestFe_1gabc46e3e179805f6b30e0324f3a9aaea3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'getNChooseR';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'n';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'r';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.cpp';
      func-mem-desc-line = '20';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Computes \form#58 "n choose r".
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Computes formula \form#57@_fakenl

@param n Number
@param r Number which is smaller or equal to n
@return Value Value of "n choose r"
_EnD_oF_dEf_TeXt_;
      func-mem-referenceby = {
        func-mem-ref-id = 'testFeLib_8cpp_1ga0d2fbcda42a00681d6d0662a3448499d';
        func-mem-ref-line = '32';
        func-mem-ref-name = 'getExactIntegrationRefTri';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__TestFe_1ga0d2fbcda42a00681d6d0662a3448499d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'getExactIntegrationRefTri';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'alpha';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'beta';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.cpp';
      func-mem-desc-line = '32';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Computes integration of polynomial exactly over reference triangle.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Given \form#38, the exact integration is given by
 \form#44@_fakenl@_fakenl
where \form#57
We have \form#47 so that
term for \form#48 is not zero. Above formula gives the exact value of
integral of \form#38 over reference triangle.

@param alpha Polynomial order in variable s
@param beta Polynomial order in variable t
@return I Exact integration of \form#38
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'testFeLib_8cpp_1gabc46e3e179805f6b30e0324f3a9aaea3';
        func-mem-ref-line = '20';
        func-mem-ref-name = 'getNChooseR';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'testFeLib_8cpp_1ga9d701a802ca6f16e630b09dfefbaa847';
        func-mem-ref-line = '62';
        func-mem-ref-name = 'testTriRef';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'testFeLib_8cpp_1a72c3ccfc15bacb8e7fea5ef57e678bc5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'checkRefIntegration';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const size_t &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'n';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const size_t &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'i';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const size_t &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'j';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< fe::QuadData > &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'qds';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'I_exact';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.cpp';
      func-mem-desc-line = '46';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__TestFe_1ga9d701a802ca6f16e630b09dfefbaa847';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'testTriRef';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'n';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.cpp';
      func-mem-desc-line = '62';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Perform test on quadrature points on reference triangle.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function performs accuracy test of the quadrature points for
integration over reference triangle with vertices at {(0,0), (1,0), (0,1)}.
List of tests are as follows:

1. Computes quadrature points of the given order, writes them to the file,
and checks if the sum of quadrature weights is equal to 0.5 (area of
reference triangl).

2. Tests exactness of the integration of the polynomial upto given order.
Suppose \form#32 is the order of quadrature point, then we test if the
integration of the function \form#38 is exact for
 \form#39 and \form#40 such that \form#41. The
exact integration of function \form#42 over reference triangle is
 \form#44@_fakenl@_fakenl@_fakenl
where \form#57
We have \form#47 so that
term for \form#48 is not zero. Above formula gives the exact value of
integral of \form#38 over reference triangle.
Approximation by quadrature point is as follows
 \form#49
where \form#55 is the total number of quad points, \form#50 and
 \form#51 are the \form#52 quad weight and point. In this
test, we compare \form#53 and \form#54 and report
problem if both do not match.

@param n Order of quadrature point approximation
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'quadrature_8cpp_1a4f07150114e1232b562ba7371dabf5f3';
        func-mem-ref-line = '16';
        func-mem-ref-name = 'fe::Quadrature< T >::getQuadPoints';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'testFeLib_8cpp_1ga0d2fbcda42a00681d6d0662a3448499d';
        func-mem-ref-line = '32';
        func-mem-ref-name = 'getExactIntegrationRefTri';
    };
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'testFeLib_8cpp_1a7fe7a2d892789540ed424673579f2f35';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static const double
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'tol';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 1.0E-12
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.cpp';
      var-mem-desc-line = '18';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'testFeLib_8h';
  file-name = 'testFeLib.h';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__TestFe_1ga9d701a802ca6f16e630b09dfefbaa847';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'testTriRef';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'n';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.h';
      func-mem-desc-line = '51';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Perform test on quadrature points on reference triangle.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function performs accuracy test of the quadrature points for
integration over reference triangle with vertices at {(0,0), (1,0), (0,1)}.
List of tests are as follows:

1. Computes quadrature points of the given order, writes them to the file,
and checks if the sum of quadrature weights is equal to 0.5 (area of
reference triangl).

2. Tests exactness of the integration of the polynomial upto given order.
Suppose \form#32 is the order of quadrature point, then we test if the
integration of the function \form#38 is exact for
 \form#39 and \form#40 such that \form#41. The
exact integration of function \form#42 over reference triangle is
 \form#44@_fakenl@_fakenl@_fakenl
where \form#57
We have \form#47 so that
term for \form#48 is not zero. Above formula gives the exact value of
integral of \form#38 over reference triangle.
Approximation by quadrature point is as follows
 \form#49
where \form#55 is the total number of quad points, \form#50 and
 \form#51 are the \form#52 quad weight and point. In this
test, we compare \form#53 and \form#54 and report
problem if both do not match.

@param n Order of quadrature point approximation
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'quadrature_8cpp_1a4f07150114e1232b562ba7371dabf5f3';
        func-mem-ref-line = '16';
        func-mem-ref-name = 'fe::Quadrature< T >::getQuadPoints';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'testFeLib_8cpp_1ga0d2fbcda42a00681d6d0662a3448499d';
        func-mem-ref-line = '32';
        func-mem-ref-name = 'getExactIntegrationRefTri';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__TestFe_1ga0d2fbcda42a00681d6d0662a3448499d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'getExactIntegrationRefTri';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'alpha';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'beta';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.h';
      func-mem-desc-line = '69';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Computes integration of polynomial exactly over reference triangle.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Given \form#38, the exact integration is given by
 \form#44@_fakenl@_fakenl
where \form#57
We have \form#47 so that
term for \form#48 is not zero. Above formula gives the exact value of
integral of \form#38 over reference triangle.

@param alpha Polynomial order in variable s
@param beta Polynomial order in variable t
@return I Exact integration of \form#38
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'testFeLib_8cpp_1gabc46e3e179805f6b30e0324f3a9aaea3';
        func-mem-ref-line = '20';
        func-mem-ref-name = 'getNChooseR';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'testFeLib_8cpp_1ga9d701a802ca6f16e630b09dfefbaa847';
        func-mem-ref-line = '62';
        func-mem-ref-name = 'testTriRef';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__TestFe_1gabc46e3e179805f6b30e0324f3a9aaea3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'getNChooseR';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'n';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
size_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'r';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.h';
      func-mem-desc-line = '81';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Computes \form#58 "n choose r".
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Computes formula \form#57@_fakenl

@param n Number
@param r Number which is smaller or equal to n
@return Value Value of "n choose r"
_EnD_oF_dEf_TeXt_;
      func-mem-referenceby = {
        func-mem-ref-id = 'testFeLib_8cpp_1ga0d2fbcda42a00681d6d0662a3448499d';
        func-mem-ref-line = '32';
        func-mem-ref-name = 'getExactIntegrationRefTri';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/test/fe/testFeLib.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'compare_8cpp';
  file-name = 'compare.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/compare.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'compare_8h';
  file-name = 'compare.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'compare_8h_1a1da7029c7b8f055702e0dd8a8616f1d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'COMPARE_EPS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1e-5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/compare.h';
      define-mem-desc-line = '10';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1_1compare_1a4308485d5a4420bdbaa8c33ce9569c45';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'approximatelyEqual';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/compare.h';
      func-mem-desc-line = '24';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Compares if a is approximately equal to b.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a Value a
@param b Value b
@return Result true if approximately equal else false
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1_1compare_1aee36cc8b86ae0244f6dd51d9426cd344';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'essentiallyEqual';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/compare.h';
      func-mem-desc-line = '33';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Compares if a is essentially equal to b.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a Value a
@param b Value b
@return Result true if essentially equal else false
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1_1compare_1a01f7d35cb54e6e1274397c07dc843f63';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'definitelyGreaterThan';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/compare.h';
      func-mem-desc-line = '42';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Compares if a > to b.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a Value a
@param b Value b
@return Result true if a is definitely greater than b
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1_1compare_1afbc9630e288fb337b0a67e3cf6df02c9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'definitelyLessThan';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/compare.h';
      func-mem-desc-line = '51';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Compares if a is < to b.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a Value a
@param b Value b
@return Result true if a is definitely less than b
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/compare.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'feElementDefs_8h';
  file-name = 'feElementDefs.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/feElementDefs.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'matrix_8h';
  file-name = 'matrix.h';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrix.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'matrixBlaze_8h';
  file-name = 'matrixBlaze.h';
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a93fd0535b3a11a83bbb5f85661a80f40';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::DynamicVector< double, blaze::columnVector >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'VectorXi';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '14';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of vector.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a8da9a4c9a1cee1ad9a57829c597d59a7';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::DynamicMatrix< double >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'Matrixij';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '16';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of n x m matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a53874f706ae826d3c9705918656e43c6';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::SymmetricMatrix< blaze::DynamicMatrix< double > >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'SymMatrixij';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '18';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of n x n symmetric matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1aa737a6c97ebceec87bce510809ceac2b';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::StaticMatrix< double, 3UL, 3UL >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'Matrix33';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '20';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of 3 x 3 matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a2cf45e4f18b6547ff8a6c3218b6a5628';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::SymmetricMatrix< blaze::StaticMatrix< double, 3UL, 3UL > >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'SymMatrix33';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '23';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of 3 x 3 symmetric matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1acbd115bfd8f9fbb531f0625458f58ba1';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::StaticVector< double, 3UL >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'Vector3';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '25';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of 3D vector.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1acf97efd3c22570a17db95655b38f9aa3';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::IdentityMatrix< double >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'IdentityMatrix';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '27';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Identity matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a284ba319f8244f8cad4efe84a50c32fc';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::DynamicVector< float, blaze::columnVector >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'VectorFXi';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '30';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of vector.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a28b06815c9b5b240ed5949bc18becfe5';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::DynamicMatrix< float >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'MatrixFij';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '32';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of n x m matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a2240b1684d1e01f1c7e36a9a5cba87d0';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::SymmetricMatrix< blaze::DynamicMatrix< float > >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'SymMatrixFij';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '34';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of n x n symmetric matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a7a1f05e137c8762c8452a48dc45b56af';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::StaticMatrix< float, 3UL, 3UL >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'MatrixF33';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '36';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of 3 x 3 matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1adfd4d0364404b5ddc907e7564d7237a8';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::SymmetricMatrix< blaze::StaticMatrix< float, 3UL, 3UL > >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'SymMatrixF33';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '39';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of 3 x 3 symmetric matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a0f263e0e36660ec09d4ce643d53b411a';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::StaticVector< float, 3UL >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'VectorF3';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '41';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Definition of 3D vector.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'namespaceutil_1a5ef9d26df0a2184eecbe99382832032e';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
blaze::IdentityMatrix< float >
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'IdentityMatrixF';
      typedef-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
      typedef-mem-desc-line = '43';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blaze: Identity matrix.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/matrixBlaze.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'point_8h';
  file-name = 'point.h';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1a939cda0c519ee67aed932a91210744e4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'addInplace';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      func-mem-desc-line = '160';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Adds point b to point a inplace.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a Point a
@param b Point b
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1abcc789ebdbe0487fb8e01f5f1e238bf8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'subInplace';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      func-mem-desc-line = '176';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Subtracts point b to point a inplace.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a Point a
@param b Point b
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1a4d15926f993d3e53f27916a939f73e99';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'copy';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 > &
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      func-mem-desc-line = '192';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Copys vector's a content to b.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a vector of points
@param b vector of points
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1a3151db872678a9a79a6d6b2b0d0187f5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'add';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      func-mem-desc-line = '205';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Adds vector of points b to vector of points a in a element wise
manner.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a vector of points
@param b vector of points
@return Vector vector of point after element wise addition
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1a116ee5dbb5a3e0e22dca4a57a43c3245';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'subb';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< util::Point3 >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
      func-mem-desc-line = '222';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Subtracts vector of points b to vector of points a in a
element-wise manner.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param a Point a
@param b Point b
@return Vector vector of points after element-wise subtraction
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/point.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'transfomation_8h';
  file-name = 'transfomation.h';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1_1transformation_1a26ebcbf8b6107095a2ef832d7ca8243b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< double >
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'rotateCW2D';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< double >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'x';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'theta';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/transfomation.h';
      func-mem-desc-line = '22';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Rotates a vector in xy-plane in clockwise direction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param x Point
@param theta Angle
@return Point after rotation
_EnD_oF_dEf_TeXt_;
      func-mem-referenceby = {
        func-mem-ref-id = 'transformation_8cpp_1a683148eff3d8a2b0f8b7db0d4963947a';
        func-mem-ref-line = '19';
        func-mem-ref-name = 'util::transformation::rotateACW2D';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'namespaceutil_1_1transformation_1a683148eff3d8a2b0f8b7db0d4963947a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
std::vector< double >
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'rotateACW2D';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< double >
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'x';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'theta';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/transfomation.h';
      func-mem-desc-line = '30';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Rotates a vector in xy-plane in anti-clockwise direction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param x Point
@param theta Angle
@return Point after rotation
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'transformation_8cpp_1a26ebcbf8b6107095a2ef832d7ca8243b';
        func-mem-ref-line = '10';
        func-mem-ref-name = 'util::transformation::rotateCW2D';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/transfomation.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'transformation_8cpp';
  file-name = 'transformation.cpp';
  file-full-name  = '/home/prashant/work/nonlocal_methods_work/NLMech_v0.1/src/util/transformation.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
